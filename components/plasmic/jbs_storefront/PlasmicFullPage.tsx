// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: VpRM2nIn0R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: zY4oOp60G2/component
import Footer from "../../Footer"; // plasmic-import: mZogRkwS1rd/component
import Marquee from "react-fast-marquee"; // plasmic-import: m9EkGU-jS0/codeComponent
import Countdown from "../../Countdown"; // plasmic-import: zowCfpHLJi3H/component

import { ScheduleValue, useSchedule } from "./PlasmicGlobalVariant__Schedule"; // plasmic-import: zd5JVdnkSq7D/globalVariant
import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicFullPage.module.css"; // plasmic-import: VpRM2nIn0R/css

createPlasmicElementProxy;

export type PlasmicFullPage__VariantMembers = {};
export type PlasmicFullPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicFullPage__VariantsArgs;
export const PlasmicFullPage__VariantProps = new Array<VariantPropType>();

export type PlasmicFullPage__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFullPage__ArgsType;
export const PlasmicFullPage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicFullPage__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  footer?: Flex__<typeof Footer>;
  section?: Flex__<"section">;
  juhuBeachBg?: Flex__<typeof PlasmicImg__>;
  marquee?: Flex__<typeof Marquee>;
  text?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  countdown?: Flex__<typeof Countdown>;
  h1?: Flex__<"h1">;
};

export interface DefaultFullPageProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFullPage__RenderFunc(props: {
  variants: PlasmicFullPage__VariantsArgs;
  args: PlasmicFullPage__ArgsType;
  overrides: PlasmicFullPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    schedule: useSchedule(),
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_schedule_override]: hasVariant(
            globalVariants,
            "schedule",
            "override"
          )
        }
      )}
    >
      {(hasVariant(globalVariants, "schedule", "override") ? false : true) ? (
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar, {
            [sty.navbarglobal_schedule_override]: hasVariant(
              globalVariants,
              "schedule",
              "override"
            )
          })}
        />
      ) : null}
      {(hasVariant(globalVariants, "schedule", "override") ? false : true)
        ? renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })
        : null}
      {(hasVariant(globalVariants, "schedule", "override") ? false : true) ? (
        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", sty.footer, {
            [sty.footerglobal_schedule_override]: hasVariant(
              globalVariants,
              "schedule",
              "override"
            )
          })}
        />
      ) : null}
      {(hasVariant(globalVariants, "schedule", "override") ? true : false) ? (
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectionglobal_schedule_override]: hasVariant(
              globalVariants,
              "schedule",
              "override"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"juhuBeachBg"}
            data-plasmic-override={overrides.juhuBeachBg}
            alt={""}
            className={classNames(sty.juhuBeachBg, {
              [sty.juhuBeachBgglobal_schedule_override]: hasVariant(
                globalVariants,
                "schedule",
                "override"
              )
            })}
            displayHeight={
              hasVariant(globalVariants, "schedule", "override") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : hasVariant(globalVariants, "schedule", "override")
                ? "auto"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={
              hasVariant(globalVariants, "schedule", "override")
                ? "100%"
                : "100%"
            }
            displayWidth={
              hasVariant(globalVariants, "schedule", "override") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : hasVariant(globalVariants, "schedule", "override")
                ? "auto"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : "auto"
            }
            loading={
              hasVariant(globalVariants, "schedule", "override")
                ? "eager"
                : "eager"
            }
            src={
              hasVariant(globalVariants, "schedule", "override") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? {
                    src: "/plasmic/jbs_storefront/images/theJuhuBeachNarrowWebp2.webp",
                    fullWidth: 879,
                    fullHeight: 1484,
                    aspectRatio: undefined
                  }
                : hasVariant(globalVariants, "schedule", "override")
                ? {
                    src: "/plasmic/jbs_storefront/images/theJuhuBeachWideWebp.webp",
                    fullWidth: 7239,
                    fullHeight: 5047,
                    aspectRatio: undefined
                  }
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? {
                    src: "/plasmic/jbs_storefront/images/theJuhuBeachNarrowWebp2.webp",
                    fullWidth: 879,
                    fullHeight: 1484,
                    aspectRatio: undefined
                  }
                : {
                    src: "/plasmic/jbs_storefront/images/theJuhuBeachWideWebp.webp",
                    fullWidth: 7239,
                    fullHeight: 5047,
                    aspectRatio: undefined
                  }
            }
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__xGsSb, {
              [sty.freeBoxglobal_schedule_override__xGsSb2BEqj]: hasVariant(
                globalVariants,
                "schedule",
                "override"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__s7Hxr, {
                [sty.freeBoxglobal_schedule_override__s7Hxr2BEqj]: hasVariant(
                  globalVariants,
                  "schedule",
                  "override"
                )
              })}
            >
              <Marquee
                data-plasmic-name={"marquee"}
                data-plasmic-override={overrides.marquee}
                autoFill={true}
                className={classNames("__wab_instance", sty.marquee, {
                  [sty.marqueeglobal_schedule_override]: hasVariant(
                    globalVariants,
                    "schedule",
                    "override"
                  )
                })}
                play={true}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.textglobal_schedule_override]: hasVariant(
                        globalVariants,
                        "schedule",
                        "override"
                      )
                    }
                  )}
                >
                  {
                    "Limited edition pieces | Made from 100% textile waste | Handcrafted | Made in mumbai | "
                  }
                </div>
              </Marquee>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__flz3E, {
                [sty.freeBoxglobal_schedule_override__flz3E2BEqj]: hasVariant(
                  globalVariants,
                  "schedule",
                  "override"
                )
              })}
            />

            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgglobal_schedule_override]: hasVariant(
                  globalVariants,
                  "schedule",
                  "override"
                )
              })}
              displayHeight={
                hasVariant(globalVariants, "schedule", "override") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : hasVariant(globalVariants, "schedule", "override")
                  ? "auto"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : "auto"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "schedule", "override") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "30%"
                  : hasVariant(globalVariants, "schedule", "override")
                  ? "auto"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "30%"
                  : "auto"
              }
              displayMinHeight={"0"}
              displayMinWidth={
                hasVariant(globalVariants, "schedule", "override") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "20%"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "20%"
                  : "0"
              }
              displayWidth={
                hasVariant(globalVariants, "schedule", "override") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : hasVariant(globalVariants, "schedule", "override")
                  ? "10%"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "auto"
                  : "10%"
              }
              loading={
                hasVariant(globalVariants, "schedule", "override")
                  ? "eager"
                  : "eager"
              }
              src={
                hasVariant(globalVariants, "schedule", "override")
                  ? {
                      src: "/plasmic/jbs_storefront/images/jbsLogo20.svg",
                      fullWidth: 179,
                      fullHeight: 150,
                      aspectRatio: 1.194498
                    }
                  : {
                      src: "/plasmic/jbs_storefront/images/jbsLogo20.svg",
                      fullWidth: 179,
                      fullHeight: 150,
                      aspectRatio: 1.194498
                    }
              }
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__u76Au, {
                [sty.freeBoxglobal_schedule_override__u76Au2BEqj]: hasVariant(
                  globalVariants,
                  "schedule",
                  "override"
                )
              })}
            >
              <Countdown
                data-plasmic-name={"countdown"}
                data-plasmic-override={overrides.countdown}
                className={classNames("__wab_instance", sty.countdown, {
                  [sty.countdownglobal_schedule_override]: hasVariant(
                    globalVariants,
                    "schedule",
                    "override"
                  )
                })}
                targetTimeUtc={
                  hasVariant(globalVariants, "schedule", "override")
                    ? "2023-12-19T13:30:00.000Z"
                    : "2023-12-19T13:30:00.000Z"
                }
              />

              <div
                className={classNames(projectcss.all, sty.freeBox___5Jaxi, {
                  [sty.freeBoxglobal_schedule_override___5Jaxi2BEqj]:
                    hasVariant(globalVariants, "schedule", "override")
                })}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1,
                    {
                      [sty.h1global_schedule_override]: hasVariant(
                        globalVariants,
                        "schedule",
                        "override"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "schedule", "override") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "~ see you soon sweedy ~"
                    : hasVariant(globalVariants, "schedule", "override")
                    ? "~ see you soon sweedy ~"
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "~ see you soon sweedy ~"
                    : "~ see you soon sweedy ~"}
                </h1>
              </div>
            </div>
          </div>
        </section>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "footer",
    "section",
    "juhuBeachBg",
    "marquee",
    "text",
    "img",
    "countdown",
    "h1"
  ],
  navbar: ["navbar"],
  footer: ["footer"],
  section: [
    "section",
    "juhuBeachBg",
    "marquee",
    "text",
    "img",
    "countdown",
    "h1"
  ],
  juhuBeachBg: ["juhuBeachBg"],
  marquee: ["marquee", "text"],
  text: ["text"],
  img: ["img"],
  countdown: ["countdown"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  footer: typeof Footer;
  section: "section";
  juhuBeachBg: typeof PlasmicImg__;
  marquee: typeof Marquee;
  text: "div";
  img: typeof PlasmicImg__;
  countdown: typeof Countdown;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFullPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFullPage__VariantsArgs;
    args?: PlasmicFullPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFullPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFullPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFullPage__ArgProps,
          internalVariantPropNames: PlasmicFullPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFullPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullPage";
  } else {
    func.displayName = `PlasmicFullPage.${nodeName}`;
  }
  return func;
}

export const PlasmicFullPage = Object.assign(
  // Top-level PlasmicFullPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    footer: makeNodeComponent("footer"),
    section: makeNodeComponent("section"),
    juhuBeachBg: makeNodeComponent("juhuBeachBg"),
    marquee: makeNodeComponent("marquee"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    countdown: makeNodeComponent("countdown"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicFullPage
    internalVariantProps: PlasmicFullPage__VariantProps,
    internalArgProps: PlasmicFullPage__ArgProps
  }
);

export default PlasmicFullPage;
/* prettier-ignore-end */
