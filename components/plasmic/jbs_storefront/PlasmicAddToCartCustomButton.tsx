// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: AyNa8RYOflZ1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AddToCartButton } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicAddToCartCustomButton.module.css"; // plasmic-import: AyNa8RYOflZ1/css

createPlasmicElementProxy;

export type PlasmicAddToCartCustomButton__VariantMembers = {
  addedToCartVariant: "addedToCartVariant";
};
export type PlasmicAddToCartCustomButton__VariantsArgs = {
  addedToCartVariant?: SingleBooleanChoiceArg<"addedToCartVariant">;
};
type VariantPropType = keyof PlasmicAddToCartCustomButton__VariantsArgs;
export const PlasmicAddToCartCustomButton__VariantProps =
  new Array<VariantPropType>("addedToCartVariant");

export type PlasmicAddToCartCustomButton__ArgsType = {};
type ArgPropType = keyof PlasmicAddToCartCustomButton__ArgsType;
export const PlasmicAddToCartCustomButton__ArgProps = new Array<ArgPropType>();

export type PlasmicAddToCartCustomButton__OverridesType = {
  root?: p.Flex<"div">;
  addToCartButton?: p.Flex<typeof AddToCartButton>;
  button?: p.Flex<"button">;
};

export interface DefaultAddToCartCustomButtonProps {
  addedToCartVariant?: SingleBooleanChoiceArg<"addedToCartVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddToCartCustomButton__RenderFunc(props: {
  variants: PlasmicAddToCartCustomButton__VariantsArgs;
  args: PlasmicAddToCartCustomButton__ArgsType;
  overrides: PlasmicAddToCartCustomButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "addedToCart",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "addedToCartVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.addedToCartVariant
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootaddedToCartVariant]: hasVariant(
            $state,
            "addedToCartVariant",
            "addedToCartVariant"
          )
        }
      )}
    >
      <AddToCartButton
        data-plasmic-name={"addToCartButton"}
        data-plasmic-override={overrides.addToCartButton}
        className={classNames("__wab_instance", sty.addToCartButton)}
      >
        <button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button,
            {
              [sty.buttonaddedToCartVariant]: hasVariant(
                $state,
                "addedToCartVariant",
                "addedToCartVariant"
              )
            }
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updatedVariant"] = false
              ? (() => {
                  const actionArgs = {
                    vgroup: "addedToCartVariant",
                    operation: 4
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    p.set($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updatedVariant"] != null &&
              typeof $steps["updatedVariant"] === "object" &&
              typeof $steps["updatedVariant"].then === "function"
            ) {
              $steps["updatedVariant"] = await $steps["updatedVariant"];
            }

            $steps["showNotification"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "success",
                      "Item added to cart!",
                      (() => {
                        try {
                          return $ctx.currentProduct.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      3
                    ]
                  };
                  return $globalActions[
                    "plasmic-antd5-config-provider.showNotification"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["showNotification"] != null &&
              typeof $steps["showNotification"] === "object" &&
              typeof $steps["showNotification"].then === "function"
            ) {
              $steps["showNotification"] = await $steps["showNotification"];
            }

            $steps["waitFor2Seconds"] = false
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return setTimeout(() => {}, 2000);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["waitFor2Seconds"] != null &&
              typeof $steps["waitFor2Seconds"] === "object" &&
              typeof $steps["waitFor2Seconds"].then === "function"
            ) {
              $steps["waitFor2Seconds"] = await $steps["waitFor2Seconds"];
            }

            $steps["revertVariantToBase"] = false
              ? (() => {
                  const actionArgs = {
                    vgroup: "addedToCartVariant",
                    operation: 6
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    p.set($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["revertVariantToBase"] != null &&
              typeof $steps["revertVariantToBase"] === "object" &&
              typeof $steps["revertVariantToBase"].then === "function"
            ) {
              $steps["revertVariantToBase"] = await $steps[
                "revertVariantToBase"
              ];
            }
          }}
        >
          {"Add To Cart"}
        </button>
      </AddToCartButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "addToCartButton", "button"],
  addToCartButton: ["addToCartButton", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  addToCartButton: typeof AddToCartButton;
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddToCartCustomButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddToCartCustomButton__VariantsArgs;
    args?: PlasmicAddToCartCustomButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddToCartCustomButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddToCartCustomButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddToCartCustomButton__ArgProps,
          internalVariantPropNames: PlasmicAddToCartCustomButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddToCartCustomButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddToCartCustomButton";
  } else {
    func.displayName = `PlasmicAddToCartCustomButton.${nodeName}`;
  }
  return func;
}

export const PlasmicAddToCartCustomButton = Object.assign(
  // Top-level PlasmicAddToCartCustomButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    addToCartButton: makeNodeComponent("addToCartButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAddToCartCustomButton
    internalVariantProps: PlasmicAddToCartCustomButton__VariantProps,
    internalArgProps: PlasmicAddToCartCustomButton__ArgProps
  }
);

export default PlasmicAddToCartCustomButton;
/* prettier-ignore-end */
