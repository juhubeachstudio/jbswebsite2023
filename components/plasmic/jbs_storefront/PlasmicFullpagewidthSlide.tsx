// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: DUKvgkpbeBWf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: yEsI5slGwPm/component

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicFullpagewidthSlide.module.css"; // plasmic-import: DUKvgkpbeBWf/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicFullpagewidthSlide__VariantMembers = {};
export type PlasmicFullpagewidthSlide__VariantsArgs = {};
type VariantPropType = keyof PlasmicFullpagewidthSlide__VariantsArgs;
export const PlasmicFullpagewidthSlide__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFullpagewidthSlide__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFullpagewidthSlide__ArgsType;
export const PlasmicFullpagewidthSlide__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicFullpagewidthSlide__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultFullpagewidthSlideProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFullpagewidthSlide__RenderFunc(props: {
  variants: PlasmicFullpagewidthSlide__VariantsArgs;
  args: PlasmicFullpagewidthSlide__ArgsType;
  overrides: PlasmicFullpagewidthSlide__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___5ZeeQ)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___2YTvc)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              src={{
                src: "/plasmic/jbs_storefront/images/asset76Png.png",
                fullWidth: 5319,
                fullHeight: 2949,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__qZlh)}>
        <div className={classNames(projectcss.all, sty.freeBox__bo6Bj)}>
          {p.renderPlasmicSlot({
            defaultContents: "Chakhna",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__oZaT7)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Life is a party, these are the snacks our \ndelightful new Textile Collectibles ",
            value: args.slot2,
            className: classNames(sty.slotTargetSlot2)
          })}
        </div>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Button2
              className={classNames("__wab_instance", sty.button2__haaPw)}
              color={"pink"}
            >
              {"Shop all Chakhna"}
            </Button2>
          ),
          value: args.slot3
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFullpagewidthSlide__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFullpagewidthSlide__VariantsArgs;
    args?: PlasmicFullpagewidthSlide__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFullpagewidthSlide__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFullpagewidthSlide__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFullpagewidthSlide__ArgProps,
          internalVariantPropNames: PlasmicFullpagewidthSlide__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFullpagewidthSlide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullpagewidthSlide";
  } else {
    func.displayName = `PlasmicFullpagewidthSlide.${nodeName}`;
  }
  return func;
}

export const PlasmicFullpagewidthSlide = Object.assign(
  // Top-level PlasmicFullpagewidthSlide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFullpagewidthSlide
    internalVariantProps: PlasmicFullpagewidthSlide__VariantProps,
    internalArgProps: PlasmicFullpagewidthSlide__ArgProps
  }
);

export default PlasmicFullpagewidthSlide;
/* prettier-ignore-end */
