/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: Ft4Mem_Zab

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicProductCardJbs.module.css"; // plasmic-import: Ft4Mem_Zab/css

createPlasmicElementProxy;

export type PlasmicProductCardJbs__VariantMembers = {};
export type PlasmicProductCardJbs__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductCardJbs__VariantsArgs;
export const PlasmicProductCardJbs__VariantProps = new Array<VariantPropType>();

export type PlasmicProductCardJbs__ArgsType = { currentItem?: string };
type ArgPropType = keyof PlasmicProductCardJbs__ArgsType;
export const PlasmicProductCardJbs__ArgProps = new Array<ArgPropType>(
  "currentItem"
);

export type PlasmicProductCardJbs__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  productTextField?: Flex__<typeof ProductTextField>;
  productPrice?: Flex__<typeof ProductPriceComponent>;
  listPrice?: Flex__<"div">;
};

export interface DefaultProductCardJbsProps {
  currentItem?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCardJbs__RenderFunc(props: {
  variants: PlasmicProductCardJbs__VariantsArgs;
  args: PlasmicProductCardJbs__ArgsType;
  overrides: PlasmicProductCardJbs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(() => {
        try {
          return !$ctx.currentProduct.availableForSale;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__ho5W)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"SOLD OUT"}
          </div>
        </div>
      ) : null}
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__cdKoo)}
        component={Link}
        href={`/product/${(() => {
          try {
            return $props.currentItem.slug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "undefined";
            }
            throw e;
          }
        })()}`}
        platform={"nextjs"}
      >
        <ProductMedia
          className={classNames("__wab_instance", sty.productMedia__rUWyF)}
          mediaIndex={0}
        />

        <ProductMedia
          className={classNames("__wab_instance", sty.productMedia__zreYd)}
          mediaIndex={triggers.hover_root ? 1 : 1}
        />
      </PlasmicLink__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___3HlGq)}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link___7Zco)}
          component={Link}
          href={`/product/${(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}`}
          platform={"nextjs"}
        >
          <ProductTextField
            data-plasmic-name={"productTextField"}
            data-plasmic-override={overrides.productTextField}
            className={classNames("__wab_instance", sty.productTextField)}
            field={"name"}
          />
        </PlasmicLink__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3MPn)}
        >
          <ProductPriceComponent
            data-plasmic-name={"productPrice"}
            data-plasmic-override={overrides.productPrice}
            className={classNames("__wab_instance", sty.productPrice)}
          />

          <div
            data-plasmic-name={"listPrice"}
            data-plasmic-override={overrides.listPrice}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.listPrice
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    let minListPrice = $props.currentItem.variants.reduce(
                      (minPrice, variant) => {
                        return variant.listPrice && variant.listPrice < minPrice
                          ? variant.listPrice
                          : minPrice;
                      },
                      Infinity
                    );
                    return minListPrice && minListPrice !== Infinity
                      ? "\u20B9" + minListPrice
                      : "";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "productTextField", "productPrice", "listPrice"],
  text: ["text"],
  productTextField: ["productTextField"],
  productPrice: ["productPrice"],
  listPrice: ["listPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  productTextField: typeof ProductTextField;
  productPrice: typeof ProductPriceComponent;
  listPrice: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCardJbs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCardJbs__VariantsArgs;
    args?: PlasmicProductCardJbs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCardJbs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCardJbs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCardJbs__ArgProps,
          internalVariantPropNames: PlasmicProductCardJbs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCardJbs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCardJbs";
  } else {
    func.displayName = `PlasmicProductCardJbs.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCardJbs = Object.assign(
  // Top-level PlasmicProductCardJbs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    productTextField: makeNodeComponent("productTextField"),
    productPrice: makeNodeComponent("productPrice"),
    listPrice: makeNodeComponent("listPrice"),

    // Metadata about props expected for PlasmicProductCardJbs
    internalVariantProps: PlasmicProductCardJbs__VariantProps,
    internalArgProps: PlasmicProductCardJbs__ArgProps
  }
);

export default PlasmicProductCardJbs;
/* prettier-ignore-end */
