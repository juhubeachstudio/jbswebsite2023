// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: Ft4Mem_Zab

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicProductCardJbs.module.css"; // plasmic-import: Ft4Mem_Zab/css

createPlasmicElementProxy;

export type PlasmicProductCardJbs__VariantMembers = {};
export type PlasmicProductCardJbs__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductCardJbs__VariantsArgs;
export const PlasmicProductCardJbs__VariantProps = new Array<VariantPropType>();

export type PlasmicProductCardJbs__ArgsType = {
  currentItem?: string;
};
type ArgPropType = keyof PlasmicProductCardJbs__ArgsType;
export const PlasmicProductCardJbs__ArgProps = new Array<ArgPropType>(
  "currentItem"
);

export type PlasmicProductCardJbs__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  productTextField?: p.Flex<typeof ProductTextField>;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
};

export interface DefaultProductCardJbsProps {
  currentItem?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCardJbs__RenderFunc(props: {
  variants: PlasmicProductCardJbs__VariantsArgs;
  args: PlasmicProductCardJbs__ArgsType;
  overrides: PlasmicProductCardJbs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.PlasmicLink
        className={classNames(projectcss.all, projectcss.a, sty.link__cdKoo)}
        component={Link}
        href={`/product/${(() => {
          try {
            return $props.currentItem.slug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "undefined";
            }
            throw e;
          }
        })()}`}
        platform={"nextjs"}
      >
        <ProductMedia
          className={classNames("__wab_instance", sty.productMedia__rUWyF)}
          mediaIndex={0}
        />

        <ProductMedia
          className={classNames("__wab_instance", sty.productMedia__zreYd)}
          mediaIndex={triggers.hover_root ? 1 : 1}
        />
      </p.PlasmicLink>
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link___7Zco)}
          component={Link}
          href={`/product/${(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}`}
          platform={"nextjs"}
        >
          <ProductTextField
            data-plasmic-name={"productTextField"}
            data-plasmic-override={overrides.productTextField}
            className={classNames("__wab_instance", sty.productTextField)}
            field={"name"}
          />
        </p.PlasmicLink>
        <ProductPriceComponent
          data-plasmic-name={"productPrice"}
          data-plasmic-override={overrides.productPrice}
          className={classNames("__wab_instance", sty.productPrice)}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "productTextField", "productPrice"],
  freeBox: ["freeBox", "productTextField", "productPrice"],
  productTextField: ["productTextField"],
  productPrice: ["productPrice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  productTextField: typeof ProductTextField;
  productPrice: typeof ProductPriceComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCardJbs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCardJbs__VariantsArgs;
    args?: PlasmicProductCardJbs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCardJbs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCardJbs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCardJbs__ArgProps,
          internalVariantPropNames: PlasmicProductCardJbs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCardJbs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCardJbs";
  } else {
    func.displayName = `PlasmicProductCardJbs.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCardJbs = Object.assign(
  // Top-level PlasmicProductCardJbs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    productTextField: makeNodeComponent("productTextField"),
    productPrice: makeNodeComponent("productPrice"),

    // Metadata about props expected for PlasmicProductCardJbs
    internalVariantProps: PlasmicProductCardJbs__VariantProps,
    internalArgProps: PlasmicProductCardJbs__ArgProps
  }
);

export default PlasmicProductCardJbs;
/* prettier-ignore-end */
