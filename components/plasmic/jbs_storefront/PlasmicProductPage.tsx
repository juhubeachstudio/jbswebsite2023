/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: sFlg1tQbot

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import { ProductBox } from "@plasmicpkgs/commerce";
import { PlasmicHead } from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import { ProductVariantPicker } from "@plasmicpkgs/commerce";
import AddToCartCustomButton from "../../AddToCartCustomButton"; // plasmic-import: AyNa8RYOflZ1/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import ProductCardJbs from "../../ProductCardJbs"; // plasmic-import: Ft4Mem_Zab/component
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicProductPage.module.css"; // plasmic-import: sFlg1tQbot/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicProductPage__VariantMembers = {};
export type PlasmicProductPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductPage__VariantsArgs;
export const PlasmicProductPage__VariantProps = new Array<VariantPropType>();

export type PlasmicProductPage__ArgsType = {};
type ArgPropType = keyof PlasmicProductPage__ArgsType;
export const PlasmicProductPage__ArgProps = new Array<ArgPropType>();

export type PlasmicProductPage__OverridesType = {
  root?: Flex__<"div">;
  fullPage?: Flex__<typeof FullPage>;
  columns?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  productMedia?: Flex__<typeof ProductMedia>;
  productPrice?: Flex__<typeof ProductPriceComponent>;
  listPrice?: Flex__<"div">;
  productVariantPicker?: Flex__<typeof ProductVariantPicker>;
  addToCartCustomButton?: Flex__<typeof AddToCartCustomButton>;
  accordion?: Flex__<typeof AntdAccordion>;
  section?: Flex__<typeof Section>;
  productCardJbs?: Flex__<typeof ProductCardJbs>;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
};

export interface DefaultProductPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductPage__RenderFunc(props: {
  variants: PlasmicProductPage__VariantsArgs;
  args: PlasmicProductPage__ArgsType;
  overrides: PlasmicProductPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column___88Slm)}>
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__k8N2T
                  )}
                  id={(() => {
                    try {
                      return $ctx.params.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  noLayout={true}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <PlasmicHead
                          data-plasmic-name={"pageMetadataOverride"}
                          data-plasmic-override={overrides.pageMetadataOverride}
                          description={(() => {
                            try {
                              return $ctx.currentProduct.description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          image={(() => {
                            try {
                              return $ctx.currentProduct.images[0].url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          title={(() => {
                            try {
                              return $ctx.currentProduct.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hnKz
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.currentProduct.images;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <ProductMedia
                                data-plasmic-name={"productMedia"}
                                data-plasmic-override={overrides.productMedia}
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia
                                )}
                                key={currentIndex}
                                mediaIndex={(() => {
                                  try {
                                    return currentIndex;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                        </div>
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                </ProductBox>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__vIqh5)}
              >
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__hfBk0
                  )}
                  id={(() => {
                    try {
                      return $ctx.params.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__emiHk
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__kxHmd
                            )}
                            field={"name"}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c4QrQ
                            )}
                          >
                            <ProductPriceComponent
                              data-plasmic-name={"productPrice"}
                              data-plasmic-override={overrides.productPrice}
                              className={classNames(
                                "__wab_instance",
                                sty.productPrice
                              )}
                            />

                            <div
                              data-plasmic-name={"listPrice"}
                              data-plasmic-override={overrides.listPrice}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.listPrice
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      let minListPrice =
                                        $ctx.currentProduct.variants.reduce(
                                          (minPrice, variant) => {
                                            return variant.listPrice &&
                                              variant.listPrice < minPrice
                                              ? variant.listPrice
                                              : minPrice;
                                          },
                                          Infinity
                                        );
                                      return minListPrice &&
                                        minListPrice !== Infinity
                                        ? "\u20B9" + minListPrice
                                        : "";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                          {(() => {
                            try {
                              return $ctx.currentProduct.variants.length > 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <ProductVariantPicker
                              data-plasmic-name={"productVariantPicker"}
                              data-plasmic-override={
                                overrides.productVariantPicker
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.productVariantPicker
                              )}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $ctx.currentProduct.variants.length > 1 &&
                                $ctx.currentProduct.variants.some(
                                  variant => !variant.availableForSale
                                )
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__is2Zg
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const soldOutVariants =
                                        $ctx.currentProduct.variants.filter(
                                          variant => !variant.availableForSale
                                        );
                                      const variantNames = soldOutVariants.map(
                                        variant => variant.name
                                      );
                                      const message = `Note: ${variantNames.join(
                                        ", "
                                      )} ${
                                        soldOutVariants.length > 1
                                          ? "variants are"
                                          : "variant is"
                                      } all sold out :( the other ones are still available 👀`;
                                      return message;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__bQZeN
                            )}
                            field={"description"}
                          />
                        </Stack__>
                        <AddToCartCustomButton
                          data-plasmic-name={"addToCartCustomButton"}
                          data-plasmic-override={
                            overrides.addToCartCustomButton
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.addToCartCustomButton
                          )}
                        />

                        {(() => {
                          const child$Props = {
                            activeKey: generateStateValueProp($state, [
                              "accordion",
                              "activePanelId"
                            ]),
                            bordered: false,
                            className: classNames(
                              "__wab_instance",
                              sty.accordion
                            ),
                            expandIconPosition: "end",
                            items: (
                              <React.Fragment>
                                <AntdAccordionItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.accordionItem__cyA7Q
                                  )}
                                  headerClass={classNames({
                                    [sty["pcls_glhVZ5pr61R9"]]: true
                                  })}
                                  id={1}
                                  label2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6OyBx
                                      )}
                                    >
                                      {"Product Details"}
                                    </div>
                                  }
                                  showArrow={true}
                                >
                                  <GraphqlFetcher
                                    className={classNames(
                                      "__wab_instance",
                                      sty.graphQlFetcher__v5IcA
                                    )}
                                    dataName={"fetchedData"}
                                    errorDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Error fetching data"}
                                      </DataCtxReader__>
                                    }
                                    errorName={"fetchError"}
                                    headers={{
                                      "Content-Type": "application/json",
                                      Accept: "application/json",
                                      "X-Shopify-Storefront-Access-Token":
                                        "0f43cbfd628ae6e4fef6a34969378290"
                                    }}
                                    loadingDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Loading..."}
                                      </DataCtxReader__>
                                    }
                                    method={"POST"}
                                    noLayout={false}
                                    query={{
                                      query:
                                        'query MyQuery($id: ID!) {\n  product(id: $id) {\n    metafield(key: "product_details", namespace: "descriptors") {\n      value\n    }\n}\n}',
                                      variables: { name: "Rick Sanchez" }
                                    }}
                                    url={
                                      "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                                    }
                                    varOverrides={(() => {
                                      try {
                                        return { id: $ctx.currentProduct.id };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {};
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__yaIk
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $ctx.fetchedData.data
                                                  .product.metafield.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      )}
                                    </DataCtxReader__>
                                  </GraphqlFetcher>
                                </AntdAccordionItem>
                                <AntdAccordionItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.accordionItem__jPeb
                                  )}
                                  headerClass={classNames({
                                    [sty["pcls_LhikHYKCERFN"]]: true
                                  })}
                                  id={1}
                                  label2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__chhbz
                                      )}
                                    >
                                      {"Wash + Care Instructions"}
                                    </div>
                                  }
                                  showArrow={true}
                                >
                                  <GraphqlFetcher
                                    className={classNames(
                                      "__wab_instance",
                                      sty.graphQlFetcher__yFr
                                    )}
                                    dataName={"fetchedData"}
                                    errorDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Error fetching data"}
                                      </DataCtxReader__>
                                    }
                                    errorName={"fetchError"}
                                    headers={{
                                      "Content-Type": "application/json",
                                      Accept: "application/json",
                                      "X-Shopify-Storefront-Access-Token":
                                        "0f43cbfd628ae6e4fef6a34969378290"
                                    }}
                                    loadingDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Loading..."}
                                      </DataCtxReader__>
                                    }
                                    method={"POST"}
                                    noLayout={false}
                                    query={{
                                      query:
                                        'query MyQuery($id: ID!) {\n  product(id: $id) {\n    metafield(key: "care_guide", namespace: "descriptors") {\n      value\n    }\n}\n}',
                                      variables: { name: "Rick Sanchez" }
                                    }}
                                    url={
                                      "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                                    }
                                    varOverrides={(() => {
                                      try {
                                        return { id: $ctx.currentProduct.id };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {};
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qvO4P
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $ctx.fetchedData.data
                                                  .product.metafield.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      )}
                                    </DataCtxReader__>
                                  </GraphqlFetcher>
                                </AntdAccordionItem>
                                <AntdAccordionItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.accordionItem__sMj4I
                                  )}
                                  headerClass={classNames({
                                    [sty["pcls_rc70p24kHQ1o"]]: true
                                  })}
                                  id={1}
                                  label2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dNtKk
                                      )}
                                    >
                                      {"Materials"}
                                    </div>
                                  }
                                  showArrow={true}
                                >
                                  <GraphqlFetcher
                                    className={classNames(
                                      "__wab_instance",
                                      sty.graphQlFetcher__rVikm
                                    )}
                                    dataName={"fetchedData"}
                                    errorDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Error fetching data"}
                                      </DataCtxReader__>
                                    }
                                    errorName={"fetchError"}
                                    headers={{
                                      "Content-Type": "application/json",
                                      Accept: "application/json",
                                      "X-Shopify-Storefront-Access-Token":
                                        "0f43cbfd628ae6e4fef6a34969378290"
                                    }}
                                    loadingDisplay={
                                      <DataCtxReader__>
                                        {$ctx => "Loading..."}
                                      </DataCtxReader__>
                                    }
                                    method={"POST"}
                                    noLayout={false}
                                    query={{
                                      query:
                                        'query MyQuery($id: ID!) {\n  product(id: $id) {\n    metafield(key: "materials", namespace: "descriptors") {\n      value\n    }\n}\n}',
                                      variables: { name: "Rick Sanchez" }
                                    }}
                                    url={
                                      "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                                    }
                                    varOverrides={(() => {
                                      try {
                                        return { id: $ctx.currentProduct.id };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {};
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ptSi9
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $ctx.fetchedData.data
                                                  .product.metafield.value;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      )}
                                    </DataCtxReader__>
                                  </GraphqlFetcher>
                                </AntdAccordionItem>
                              </React.Fragment>
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "activePanelId",
                                ["accordion", "activePanelId"],
                                AntdAccordion_Helpers
                              ).apply(null, eventArgs);
                            },
                            size: "large"
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "activePanelId",
                                plasmicStateName: "accordion.activePanelId"
                              }
                            ],
                            [],
                            AntdAccordion_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdAccordion
                              data-plasmic-name={"accordion"}
                              data-plasmic-override={overrides.accordion}
                              {...child$Props}
                            />
                          );
                        })()}
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                </ProductBox>
              </Stack__>
            </Stack__>
            <Section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames("__wab_instance", sty.section)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uIStc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ckdj2
                  )}
                >
                  {"Look how cute -"}
                </div>
              </div>
              <ProductBox
                className={classNames("__wab_instance", sty.productBox__sXbvh)}
                id={(() => {
                  try {
                    return $ctx.params.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <GraphqlFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.graphQlFetcher__pCFol
                      )}
                      dataName={"fetchedData"}
                      errorDisplay={
                        <DataCtxReader__>
                          {$ctx => "Error fetching data"}
                        </DataCtxReader__>
                      }
                      errorName={"fetchError"}
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json",
                        "X-Shopify-Storefront-Access-Token":
                          "0f43cbfd628ae6e4fef6a34969378290"
                      }}
                      loadingDisplay={
                        <DataCtxReader__>
                          {$ctx => "Loading..."}
                        </DataCtxReader__>
                      }
                      method={"POST"}
                      noLayout={false}
                      query={{
                        query:
                          'query MyQuery($id: ID!) {\n  product(id: $id) {\n    metafield(key: "related_products", namespace: "shopify--discovery--product_recommendation") {\n      value\n    }\n}\n}',
                        variables: { name: "Rick Sanchez" }
                      }}
                      url={
                        "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                      }
                      varOverrides={(() => {
                        try {
                          return { id: $ctx.currentProduct.id };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {};
                          }
                          throw e;
                        }
                      })()}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uE3Fy
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return JSON.parse(
                                    $ctx.fetchedData.data.product.metafield
                                      .value
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mcOpP
                                  )}
                                  key={currentIndex}
                                >
                                  <ProductBox
                                    className={classNames(
                                      "__wab_instance",
                                      sty.productBox__k8Qx4
                                    )}
                                    id={(() => {
                                      try {
                                        return currentItem;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <ProductCardJbs
                                          data-plasmic-name={"productCardJbs"}
                                          data-plasmic-override={
                                            overrides.productCardJbs
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.productCardJbs
                                          )}
                                          currentItem={(() => {
                                            try {
                                              return $ctx.currentProduct;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                        />
                                      )}
                                    </DataCtxReader__>
                                  </ProductBox>
                                </div>
                              );
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sytZ
                              )}
                            >
                              <Button
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button
                                )}
                                color={"clear"}
                                endIcon={
                                  <Icon38Icon
                                    data-plasmic-name={"svg"}
                                    data-plasmic-override={overrides.svg}
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg
                                    )}
                                    role={"img"}
                                  />
                                }
                                link={`/category/${"all"}`}
                                shape={"sharp"}
                                showEndIcon={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fpTmC
                                  )}
                                >
                                  {"SEE ALL"}
                                </div>
                              </Button>
                            </div>
                          </div>
                        )}
                      </DataCtxReader__>
                    </GraphqlFetcher>
                  )}
                </DataCtxReader__>
              </ProductBox>
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "columns",
    "pageMetadataOverride",
    "productMedia",
    "productPrice",
    "listPrice",
    "productVariantPicker",
    "addToCartCustomButton",
    "accordion",
    "section",
    "productCardJbs",
    "button",
    "svg"
  ],
  fullPage: [
    "fullPage",
    "columns",
    "pageMetadataOverride",
    "productMedia",
    "productPrice",
    "listPrice",
    "productVariantPicker",
    "addToCartCustomButton",
    "accordion",
    "section",
    "productCardJbs",
    "button",
    "svg"
  ],
  columns: [
    "columns",
    "pageMetadataOverride",
    "productMedia",
    "productPrice",
    "listPrice",
    "productVariantPicker",
    "addToCartCustomButton",
    "accordion"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  productMedia: ["productMedia"],
  productPrice: ["productPrice"],
  listPrice: ["listPrice"],
  productVariantPicker: ["productVariantPicker"],
  addToCartCustomButton: ["addToCartCustomButton"],
  accordion: ["accordion"],
  section: ["section", "productCardJbs", "button", "svg"],
  productCardJbs: ["productCardJbs"],
  button: ["button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  columns: "div";
  pageMetadataOverride: typeof PlasmicHead;
  productMedia: typeof ProductMedia;
  productPrice: typeof ProductPriceComponent;
  listPrice: "div";
  productVariantPicker: typeof ProductVariantPicker;
  addToCartCustomButton: typeof AddToCartCustomButton;
  accordion: typeof AntdAccordion;
  section: typeof Section;
  productCardJbs: typeof ProductCardJbs;
  button: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductPage__VariantsArgs;
    args?: PlasmicProductPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductPage__ArgProps,
          internalVariantPropNames: PlasmicProductPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductPage";
  } else {
    func.displayName = `PlasmicProductPage.${nodeName}`;
  }
  return func;
}

export const PlasmicProductPage = Object.assign(
  // Top-level PlasmicProductPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    columns: makeNodeComponent("columns"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    productMedia: makeNodeComponent("productMedia"),
    productPrice: makeNodeComponent("productPrice"),
    listPrice: makeNodeComponent("listPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    addToCartCustomButton: makeNodeComponent("addToCartCustomButton"),
    accordion: makeNodeComponent("accordion"),
    section: makeNodeComponent("section"),
    productCardJbs: makeNodeComponent("productCardJbs"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicProductPage
    internalVariantProps: PlasmicProductPage__VariantProps,
    internalArgProps: PlasmicProductPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductPage;
/* prettier-ignore-end */
