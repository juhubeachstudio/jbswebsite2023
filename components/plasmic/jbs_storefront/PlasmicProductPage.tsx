// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: sFlg1tQbot

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import Fullpageheight from "../../Fullpageheight"; // plasmic-import: JoyE-OflfH/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Y-3ZgxdS1wv60n/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import Button2 from "../../Button2"; // plasmic-import: yEsI5slGwPm/component
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: i3vHZr7erKX/codeComponent
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse"; // plasmic-import: oPUhN99n4VXI/codeComponent
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse"; // plasmic-import: oPUhN99n4VXI/codeComponentHelper
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse"; // plasmic-import: 4mmDdnlyWx2k/codeComponent
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import Blackyellowborder from "../../Blackyellowborder"; // plasmic-import: qeyEUvMFwY/component
import ProductCardJbs from "../../ProductCardJbs"; // plasmic-import: Ft4Mem_Zab/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 1xopR4ZBZs2K4b/codeComponent

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicProductPage.module.css"; // plasmic-import: sFlg1tQbot/css

import LikesvgIcon from "./icons/PlasmicIcon__Likesvg"; // plasmic-import: KZQE5ZiL9X/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicProductPage__VariantMembers = {};
export type PlasmicProductPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductPage__VariantsArgs;
export const PlasmicProductPage__VariantProps = new Array<VariantPropType>();

export type PlasmicProductPage__ArgsType = {};
type ArgPropType = keyof PlasmicProductPage__ArgsType;
export const PlasmicProductPage__ArgProps = new Array<ArgPropType>();

export type PlasmicProductPage__OverridesType = {
  root?: p.Flex<"div">;
  fullPage?: p.Flex<typeof FullPage>;
  fullpageheight?: p.Flex<typeof Fullpageheight>;
  columns?: p.Flex<"div">;
  pageMetadataOverride?: p.Flex<typeof PlasmicHead>;
  img?: p.Flex<typeof p.PlasmicImg>;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
  productMedia?: p.Flex<typeof ProductMedia>;
  button2?: p.Flex<typeof Button2>;
  productVariantPicker?: p.Flex<typeof ProductVariantPicker>;
  accordion?: p.Flex<typeof AntdAccordion>;
  addToCartButton?: p.Flex<typeof AddToCartButton>;
  button?: p.Flex<"button">;
  section?: p.Flex<typeof Section>;
  blackyellowborder?: p.Flex<typeof Blackyellowborder>;
  productCardJbs?: p.Flex<typeof ProductCardJbs>;
};

export interface DefaultProductPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductPage__RenderFunc(props: {
  variants: PlasmicProductPage__VariantsArgs;
  args: PlasmicProductPage__ArgsType;
  overrides: PlasmicProductPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <Fullpageheight
              data-plasmic-name={"fullpageheight"}
              data-plasmic-override={overrides.fullpageheight}
              className={classNames("__wab_instance", sty.fullpageheight)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column___88Slm)}>
                  <ProductBox
                    className={classNames(
                      "__wab_instance",
                      sty.productBox__k8N2T
                    )}
                    id={(() => {
                      try {
                        return $ctx.params.slug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <React.Fragment>
                          <PlasmicHead
                            data-plasmic-name={"pageMetadataOverride"}
                            data-plasmic-override={
                              overrides.pageMetadataOverride
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.pageMetadataOverride
                            )}
                            description={(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            image={(() => {
                              try {
                                return $ctx.currentProduct.images[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            title={(() => {
                              try {
                                return $ctx.currentProduct.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__a7DSt
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.currentProduct.images;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <p.PlasmicImg
                                  data-plasmic-name={"img"}
                                  data-plasmic-override={overrides.img}
                                  alt={""}
                                  className={classNames(sty.img)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  key={currentIndex}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                          </div>
                        </React.Fragment>
                      )}
                    </ph.DataCtxReader>
                  </ProductBox>
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__vIqh5)}
                >
                  <ProductBox
                    className={classNames(
                      "__wab_instance",
                      sty.productBox__hfBk0
                    )}
                    id={(() => {
                      try {
                        return $ctx.params.slug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <React.Fragment>
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__emiHk
                            )}
                          >
                            <ProductTextField
                              className={classNames(
                                "__wab_instance",
                                sty.productTextField__kxHmd
                              )}
                              field={"name"}
                            />

                            <ProductPriceComponent
                              data-plasmic-name={"productPrice"}
                              data-plasmic-override={overrides.productPrice}
                              className={classNames(
                                "__wab_instance",
                                sty.productPrice
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wKl4A
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $ctx.currentProduct.options[1]
                                      .values;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <LikesvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__gdIkn
                                    )}
                                    color={(() => {
                                      try {
                                        return $ctx.currentProduct.options[1]
                                          .values[currentIndex].label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    key={currentIndex}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return $ctx.currentProduct
                                                  .images[currentIndex].url;
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return ($state.selectedVariant =
                                                  $ctx.currentProduct.variants[
                                                    currentIndex
                                                  ].id);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ulo4R
                              )}
                            >
                              <ProductCollection
                                className={classNames(
                                  "__wab_instance",
                                  sty.productCollection__ckQr
                                )}
                                emptyMessage={
                                  <ph.DataCtxReader>
                                    {$ctx => (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__u3Se9
                                        )}
                                      >
                                        {"No product found!"}
                                      </div>
                                    )}
                                  </ph.DataCtxReader>
                                }
                                loadingMessage={
                                  <ph.DataCtxReader>
                                    {$ctx => (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tkX2R
                                        )}
                                      >
                                        {"Loading..."}
                                      </div>
                                    )}
                                  </ph.DataCtxReader>
                                }
                                noAutoRepeat={true}
                              >
                                <ph.DataCtxReader>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__iXi43
                                      )}
                                    >
                                      <ProductMedia
                                        data-plasmic-name={"productMedia"}
                                        data-plasmic-override={
                                          overrides.productMedia
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productMedia
                                        )}
                                      />
                                    </div>
                                  )}
                                </ph.DataCtxReader>
                              </ProductCollection>
                            </div>
                            <Button2
                              data-plasmic-name={"button2"}
                              data-plasmic-override={overrides.button2}
                              className={classNames(
                                "__wab_instance",
                                sty.button2
                              )}
                              endIcon={
                                <Icon38Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__gPxow
                                  )}
                                  role={"img"}
                                />
                              }
                              shape={"rounded"}
                            >
                              <ProductVariantPicker
                                data-plasmic-name={"productVariantPicker"}
                                data-plasmic-override={
                                  overrides.productVariantPicker
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.productVariantPicker
                                )}
                              />
                            </Button2>
                            {(() => {
                              try {
                                return $ctx.currentProduct.variants.some(
                                  variant => variant.availableForSale
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <ProductTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.productTextField__bQZeN
                                )}
                                field={"description"}
                              />
                            ) : null}
                            <GraphqlFetcher
                              className={classNames(
                                "__wab_instance",
                                sty.graphQlFetcher__be4J9
                              )}
                              dataName={"fetchedData"}
                              errorDisplay={
                                <ph.DataCtxReader>
                                  {$ctx => "Error fetching data"}
                                </ph.DataCtxReader>
                              }
                              headers={{
                                "Content-Type": "application/json",
                                Accept: "application/json",
                                "X-Shopify-Storefront-Access-Token":
                                  "0f43cbfd628ae6e4fef6a34969378290"
                              }}
                              loadingDisplay={
                                <ph.DataCtxReader>
                                  {$ctx => "Loading..."}
                                </ph.DataCtxReader>
                              }
                              method={"POST"}
                              noLayout={false}
                              query={{
                                query:
                                  'query MyQuery($id: ID!) {\n  product(id: $id) {\n    metafields(identifiers: {namespace: "descriptors", key: "product_details"}) {\n      id\n    }\n  }\n}\n',
                                variables: { name: "Rick Sanchez" }
                              }}
                              url={
                                "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                              }
                              varOverrides={(() => {
                                try {
                                  return { id: $ctx.currentProduct.id };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {};
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <React.Fragment>
                                    {(() => {
                                      const child$Props = {
                                        activeKey: p.generateStateValueProp(
                                          $state,
                                          ["accordion", "activePanelId"]
                                        ),
                                        bordered: true,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.accordion
                                        ),
                                        expandIconPosition: "start",
                                        items: (
                                          <React.Fragment>
                                            <AntdAccordionItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.accordionItem__amdic
                                              )}
                                              id={1}
                                              label2={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__rAhMb
                                                  )}
                                                >
                                                  {"First Item"}
                                                </div>
                                              }
                                              showArrow={true}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___203Ed
                                                )}
                                              >
                                                {"First Children"}
                                              </div>
                                            </AntdAccordionItem>
                                            <AntdAccordionItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.accordionItem__lgoCu
                                              )}
                                              id={2}
                                              label2={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__r3Bcx
                                                  )}
                                                >
                                                  {"Second Item"}
                                                </div>
                                              }
                                              showArrow={true}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___8Tnt8
                                                )}
                                              >
                                                {"Second Children"}
                                              </div>
                                            </AntdAccordionItem>
                                          </React.Fragment>
                                        ),
                                        onChange:
                                          p.generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "activePanelId",
                                            ["accordion", "activePanelId"],
                                            AntdAccordion_Helpers
                                          ),
                                        size: "small"
                                      };
                                      p.initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "activePanelId",
                                            plasmicStateName:
                                              "accordion.activePanelId"
                                          }
                                        ],
                                        [],
                                        AntdAccordion_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdAccordion
                                          data-plasmic-name={"accordion"}
                                          data-plasmic-override={
                                            overrides.accordion
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___5ZZWz
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $ctx.fetchedData.data.product
                                              .metafields[0].value;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </React.Fragment>
                                )}
                              </ph.DataCtxReader>
                            </GraphqlFetcher>
                          </p.Stack>
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__guntj
                            )}
                          >
                            <AddToCartButton
                              data-plasmic-name={"addToCartButton"}
                              data-plasmic-override={overrides.addToCartButton}
                              className={classNames(
                                "__wab_instance",
                                sty.addToCartButton
                              )}
                            >
                              <button
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.button,
                                  projectcss.__wab_text,
                                  sty.button
                                )}
                              >
                                {"Add To Cart"}
                              </button>
                            </AddToCartButton>
                          </p.Stack>
                        </React.Fragment>
                      )}
                    </ph.DataCtxReader>
                  </ProductBox>
                </p.Stack>
              </p.Stack>
            </Fullpageheight>
            <Section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames("__wab_instance", sty.section)}
            >
              <Blackyellowborder
                data-plasmic-name={"blackyellowborder"}
                data-plasmic-override={overrides.blackyellowborder}
                className={classNames("__wab_instance", sty.blackyellowborder)}
              />

              <ProductBox
                className={classNames("__wab_instance", sty.productBox__sXbvh)}
                id={(() => {
                  try {
                    return $ctx.params.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <ProductCollection
                      className={classNames(
                        "__wab_instance",
                        sty.productCollection__cZbGz
                      )}
                      count={4}
                      emptyMessage={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gGv2S
                              )}
                            >
                              {"No product found!"}
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      loadingMessage={
                        <ph.DataCtxReader>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__guTw0
                              )}
                            >
                              {"Loading..."}
                            </div>
                          )}
                        </ph.DataCtxReader>
                      }
                      search={(() => {
                        try {
                          return $ctx.currentProduct.productType;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lSGpI
                            )}
                          >
                            <ProductCardJbs
                              data-plasmic-name={"productCardJbs"}
                              data-plasmic-override={overrides.productCardJbs}
                              className={classNames(
                                "__wab_instance",
                                sty.productCardJbs
                              )}
                            />
                          </div>
                        )}
                      </ph.DataCtxReader>
                    </ProductCollection>
                  )}
                </ph.DataCtxReader>
              </ProductBox>
              <GraphqlFetcher
                className={classNames(
                  "__wab_instance",
                  sty.graphQlFetcher___5A4GZ
                )}
                dataName={"fetchedData"}
                errorDisplay={
                  <ph.DataCtxReader>
                    {$ctx => "Error fetching data"}
                  </ph.DataCtxReader>
                }
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  "X-Shopify-Storefront-Access-Token":
                    "0f43cbfd628ae6e4fef6a34969378290"
                }}
                loadingDisplay={
                  <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
                }
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    "query MyQuery($name: String) {\n  characters(filter: {name: $name}) {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n",
                  variables: { name: "Rick Sanchez" }
                }}
                url={
                  "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                }
                varOverrides={{}}
              />
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "fullpageheight",
    "columns",
    "pageMetadataOverride",
    "img",
    "productPrice",
    "productMedia",
    "button2",
    "productVariantPicker",
    "accordion",
    "addToCartButton",
    "button",
    "section",
    "blackyellowborder",
    "productCardJbs"
  ],
  fullPage: [
    "fullPage",
    "fullpageheight",
    "columns",
    "pageMetadataOverride",
    "img",
    "productPrice",
    "productMedia",
    "button2",
    "productVariantPicker",
    "accordion",
    "addToCartButton",
    "button",
    "section",
    "blackyellowborder",
    "productCardJbs"
  ],
  fullpageheight: [
    "fullpageheight",
    "columns",
    "pageMetadataOverride",
    "img",
    "productPrice",
    "productMedia",
    "button2",
    "productVariantPicker",
    "accordion",
    "addToCartButton",
    "button"
  ],
  columns: [
    "columns",
    "pageMetadataOverride",
    "img",
    "productPrice",
    "productMedia",
    "button2",
    "productVariantPicker",
    "accordion",
    "addToCartButton",
    "button"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  img: ["img"],
  productPrice: ["productPrice"],
  productMedia: ["productMedia"],
  button2: ["button2", "productVariantPicker"],
  productVariantPicker: ["productVariantPicker"],
  accordion: ["accordion"],
  addToCartButton: ["addToCartButton", "button"],
  button: ["button"],
  section: ["section", "blackyellowborder", "productCardJbs"],
  blackyellowborder: ["blackyellowborder"],
  productCardJbs: ["productCardJbs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  fullpageheight: typeof Fullpageheight;
  columns: "div";
  pageMetadataOverride: typeof PlasmicHead;
  img: typeof p.PlasmicImg;
  productPrice: typeof ProductPriceComponent;
  productMedia: typeof ProductMedia;
  button2: typeof Button2;
  productVariantPicker: typeof ProductVariantPicker;
  accordion: typeof AntdAccordion;
  addToCartButton: typeof AddToCartButton;
  button: "button";
  section: typeof Section;
  blackyellowborder: typeof Blackyellowborder;
  productCardJbs: typeof ProductCardJbs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductPage__VariantsArgs;
    args?: PlasmicProductPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductPage__ArgProps,
          internalVariantPropNames: PlasmicProductPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductPage";
  } else {
    func.displayName = `PlasmicProductPage.${nodeName}`;
  }
  return func;
}

export const PlasmicProductPage = Object.assign(
  // Top-level PlasmicProductPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    fullpageheight: makeNodeComponent("fullpageheight"),
    columns: makeNodeComponent("columns"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    img: makeNodeComponent("img"),
    productPrice: makeNodeComponent("productPrice"),
    productMedia: makeNodeComponent("productMedia"),
    button2: makeNodeComponent("button2"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    accordion: makeNodeComponent("accordion"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    button: makeNodeComponent("button"),
    section: makeNodeComponent("section"),
    blackyellowborder: makeNodeComponent("blackyellowborder"),
    productCardJbs: makeNodeComponent("productCardJbs"),

    // Metadata about props expected for PlasmicProductPage
    internalVariantProps: PlasmicProductPage__VariantProps,
    internalArgProps: PlasmicProductPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductPage;
/* prettier-ignore-end */
