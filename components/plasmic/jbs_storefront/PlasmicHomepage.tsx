// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: HsoJyy15p4bPd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import Fullpageheight from "../../Fullpageheight"; // plasmic-import: JoyE-OflfH/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import FullpageheightSlide from "../../FullpageheightSlide"; // plasmic-import: 50I_Uslx5bS3/component
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import Blackyellowborder from "../../Blackyellowborder"; // plasmic-import: qeyEUvMFwY/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import FullpagewidthSlide from "../../FullpagewidthSlide"; // plasmic-import: DUKvgkpbeBWf/component
import Button2 from "../../Button2"; // plasmic-import: yEsI5slGwPm/component
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import FullpagewidthSlide2 from "../../FullpagewidthSlide2"; // plasmic-import: dIysgpuSQtRE/component
import Marquee from "react-fast-marquee"; // plasmic-import: m9EkGU-jS0/codeComponent

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HsoJyy15p4bPd/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  fullPage?: p.Flex<typeof FullPage>;
  fullpageheight?: p.Flex<typeof Fullpageheight>;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  marquee?: p.Flex<typeof Marquee>;
  svg?: p.Flex<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <Fullpageheight
              data-plasmic-name={"fullpageheight"}
              data-plasmic-override={overrides.fullpageheight}
              className={classNames("__wab_instance", sty.fullpageheight)}
            >
              <Slider
                className={classNames(
                  "__wab_instance",
                  sty.sliderCarousel___7Xtub
                )}
                slidesToShow={
                  hasVariant(globalVariants, "screen", "mobileOnly") ? 1 : 2
                }
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__oxV1A
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__fmp4
                    )}
                  />
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___9XhIg
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__gwBsl
                    )}
                    slot={"Mehfil Lights"}
                    slot2={"Pre lit fabric cigarettes chakhnas"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__maMc)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset59Png.png",
                        fullWidth: 2698,
                        fullHeight: 3497,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zuGBn
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__wlbCj
                    )}
                    slot={"Bucket Hats"}
                    slot2={"Reversible Topis in lots of juicy colours"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__fbuK1)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset60Png.png",
                        fullWidth: 2669,
                        fullHeight: 3492,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__p1Cf3
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide___41ZTe
                    )}
                    slot={"Custom Heart  Chakhna"}
                    slot2={"Get any embroidered text of your choice"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__kn1Ug)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset62Png.png",
                        fullWidth: 2676,
                        fullHeight: 3532,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__hesOl
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__lfSj
                    )}
                    slot={"Heart Frame"}
                    slot2={"For all your special memories"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hGljC)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset63Png.png",
                        fullWidth: 2664,
                        fullHeight: 3505,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nvUfg
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__bZeW8
                    )}
                    slot={"Tote-e-Dil"}
                    slot2={"For all your baggage"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___7ZkK3)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset64Png2.png",
                        fullWidth: 2711,
                        fullHeight: 3499,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__luPXr
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <FullpageheightSlide
                    className={classNames(
                      "__wab_instance",
                      sty.fullpageheightSlide__eG5Ig
                    )}
                    slot={"Aashiq Topi"}
                    slot2={"Dedicated to all you lovers out there"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___5Al6)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/asset61Png.png",
                        fullWidth: 2676,
                        fullHeight: 3504,
                        aspectRatio: undefined
                      }}
                    />
                  </FullpageheightSlide>
                </p.PlasmicLink>
              </Slider>
            </Fullpageheight>
            <Section
              className={classNames("__wab_instance", sty.section__mx0KU)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder___5EFoi
                )}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___4WQdg)}
              >
                <div className={classNames(projectcss.all, sty.column__kfmfc)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7Ge68)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset79Png.png",
                      fullWidth: 1592,
                      fullHeight: 863,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__mrg13)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___58ZP
                    )}
                  >
                    {
                      "Welcome to Juhu Beach Studio!\nSo our first ever collection is products inspired by all the things we will literally love forever. "
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__gmrMn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___89TRu
                    )}
                  >
                    {
                      "Creatures and characters of the city, romantic love & the lack of it, our four legged children, nature, love for your work, yourself, your friends, and v. imp the love of a beautifully crafted object."
                    }
                  </div>
                </div>
              </p.Stack>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__xJgV)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__mUb0
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ai3H)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fLro1
                  )}
                >
                  {"Shop Categories"}
                </div>
                <CategoryCollection
                  data-plasmic-name={"categoryCollection"}
                  data-plasmic-override={overrides.categoryCollection}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryCollection
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q4Ri
                          )}
                        >
                          {"No collection found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ygp1L
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  noAutoRepeat={true}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Slider
                        className={classNames(
                          "__wab_instance",
                          sty.sliderCarousel__zvnue
                        )}
                        slidesPerRow={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? 2
                            : 5
                        }
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.categories;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fhh6D
                              )}
                              key={currentIndex}
                            >
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__in97Q
                                )}
                                component={Link}
                                href={`/category/${(() => {
                                  try {
                                    return currentItem.slug;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`}
                                platform={"nextjs"}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img___1TGgh)}
                                  displayHeight={"100%"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"none"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"100%"}
                                  src={(() => {
                                    try {
                                      return currentItem.images[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8Bsa7
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </p.PlasmicLink>
                            </div>
                          );
                        })}
                      </Slider>
                    )}
                  </ph.DataCtxReader>
                </CategoryCollection>
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__kbatp)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__kkJjt
                )}
              />

              <Slider
                className={classNames(
                  "__wab_instance",
                  sty.sliderCarousel___6JHy3
                )}
              >
                <FullpagewidthSlide
                  className={classNames(
                    "__wab_instance",
                    sty.fullpagewidthSlide___3IreU
                  )}
                  slot2={
                    "Life is a party, these are the snacks \nOur delightful new Textile Collectibles "
                  }
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2P15K)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset76Png.png",
                      fullWidth: 5319,
                      fullHeight: 2949,
                      aspectRatio: undefined
                    }}
                  />
                </FullpagewidthSlide>
                <FullpagewidthSlide
                  className={classNames(
                    "__wab_instance",
                    sty.fullpagewidthSlide__rOnB
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___5Sw5)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset47Png.png",
                      fullWidth: 5319,
                      fullHeight: 2948,
                      aspectRatio: undefined
                    }}
                  />
                </FullpagewidthSlide>
                <FullpagewidthSlide
                  className={classNames(
                    "__wab_instance",
                    sty.fullpagewidthSlide__ozUiu
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__yv4Fp)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset77Png.png",
                      fullWidth: 5319,
                      fullHeight: 2943,
                      aspectRatio: undefined
                    }}
                  />
                </FullpagewidthSlide>
              </Slider>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__ccPei)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gynRd)}>
                <ProductCollection
                  category={"gid://shopify/Collection/456658977064"}
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection__xe29Q
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ePlfr
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xIY
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  noAutoRepeat={true}
                  noLayout={true}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Slider
                        className={classNames(
                          "__wab_instance",
                          sty.sliderCarousel__c4EJg
                        )}
                        slidesPerRow={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? 2
                            : 5
                        }
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.products;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link___56P1
                              )}
                              component={Link}
                              key={currentIndex}
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__yEmDy)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15em"
                                    : "20em"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"100%"}
                                src={(() => {
                                  try {
                                    return currentItem.images[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3KOtG
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fwBfY
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__lSvnH
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oi6Wl
                                    )}
                                  >
                                    {"\u20b9"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0Dse8
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price.value;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </p.PlasmicLink>
                          );
                        })}
                      </Slider>
                    )}
                  </ph.DataCtxReader>
                </ProductCollection>
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___3Ew)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__pkIu4
                )}
              />

              <Section
                className={classNames("__wab_instance", sty.section__qiHuq)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yw83G)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tKuc
                    )}
                  >
                    {"Looking for something different?"}
                  </div>
                </div>
              </Section>
              <Section
                className={classNames("__wab_instance", sty.section__gQ5Oc)}
              >
                <Blackyellowborder
                  className={classNames(
                    "__wab_instance",
                    sty.blackyellowborder__jNcp
                  )}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___7Uz0X)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mCkic)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__f3JA)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/framepng.png",
                        fullWidth: 1046,
                        fullHeight: 876,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zg89B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uhnki
                      )}
                    >
                      {
                        "All of our products make incredible gifts, here are some of our favourites"
                      }
                    </div>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__uhJjf
                      )}
                    >
                      {"gift here!"}
                    </Button2>
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__b9AXi)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__p06FD)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "100%"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/img3309Png2.png",
                        fullWidth: 1311,
                        fullHeight: 1326,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </Section>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__thSrn)}
            >
              <Slider
                className={classNames(
                  "__wab_instance",
                  sty.sliderCarousel__bioRg
                )}
              >
                <FullpagewidthSlide2
                  className={classNames(
                    "__wab_instance",
                    sty.fullpagewidthSlide2__esgQ
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vXp26
                      )}
                    >
                      {"Flower Topi"}
                    </div>
                  }
                  slot2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ip4Eu
                      )}
                    >
                      {
                        "A whimsical flower shaped bucket hat, cuz you're literally a fairy, we made this just for you."
                      }
                    </div>
                  }
                  slot3={
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__imimv
                      )}
                      color={"pink"}
                    >
                      {"Shop all Caps"}
                    </Button2>
                  }
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oRta7)}
                    displayHeight={"auto"}
                    displayMaxHeight={"100%"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset68Png2.png",
                      fullWidth: 5332,
                      fullHeight: 2879,
                      aspectRatio: undefined
                    }}
                  />
                </FullpagewidthSlide2>
                <FullpagewidthSlide2
                  className={classNames(
                    "__wab_instance",
                    sty.fullpagewidthSlide2__hJkVl
                  )}
                  slot={"Bucket Hats"}
                  slot2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ihlPw
                      )}
                    >
                      {
                        "A Juhu Beach essential, gorgeous double sided bucket hats and their strange embroidered siblings"
                      }
                    </div>
                  }
                  slot3={
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__cjr7B
                      )}
                      color={"pink"}
                    >
                      {"Shop all Caps"}
                    </Button2>
                  }
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jb9Bo)}
                    displayHeight={"auto"}
                    displayMaxHeight={"100%"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset522Png.png",
                      fullWidth: 5321,
                      fullHeight: 2885,
                      aspectRatio: undefined
                    }}
                  />
                </FullpagewidthSlide2>
              </Slider>
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__khznS
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__gnDfX)}>
                <ProductCollection
                  category={"gid://shopify/Collection/455454327080"}
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection__oNdeW
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bCs1A
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eIt2N
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  noAutoRepeat={true}
                  noLayout={true}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Slider
                        className={classNames(
                          "__wab_instance",
                          sty.sliderCarousel__rIq4E
                        )}
                        slidesPerRow={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? 2
                            : 5
                        }
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.products;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ugMt1
                              )}
                              key={currentIndex}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__gNzlL)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "15em"
                                    : "20em"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"100%"}
                                src={(() => {
                                  try {
                                    return currentItem.images[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__doKCv
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nW9Dp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qw1Bn
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jIxi
                                    )}
                                  >
                                    {"\u20b9"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__y0DvB
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.price.value;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </Slider>
                    )}
                  </ph.DataCtxReader>
                </ProductCollection>
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___8R1Ui)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__jk7P
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__qfSeR)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zl0Fd)}
                  displayHeight={"189px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"219px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/jbs_storefront/images/image3.gif",
                    fullWidth: 2000,
                    fullHeight: 3496,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___4UKse)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__cPg8
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__vUUfy)}>
                <div className={classNames(projectcss.all, sty.freeBox__r9H7F)}>
                  <Marquee
                    data-plasmic-name={"marquee"}
                    data-plasmic-override={overrides.marquee}
                    autoFill={true}
                    className={classNames("__wab_instance", sty.marquee)}
                    direction={"right"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dHqP3
                      )}
                    >
                      {
                        " made from waste // women run // limited editions // handcrafted in mumbai //"
                      }
                    </div>
                  </Marquee>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__riipX)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tPjZ4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/asset32Xpng.png",
                      fullWidth: 2558,
                      fullHeight: 858,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gNDo7)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__mkbQx)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ejCnz)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aBxSm
                        )}
                      >
                        {
                          "Welcome to Juhu Beach Studio, we are a tiny studio based in Mumbai and we work exclusively with textile waste :O"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__f9Q7Z)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cQmWl
                        )}
                      >
                        {
                          "We collect fabrics (above) and transform them into delightful, lifestyle accessory products, which are handcrafted in small batches by our amazing team of women."
                        }
                      </div>
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__uGeWu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eFLx4
                        )}
                      >
                        {
                          "Our products celebrate the weird and wonderful, conceptness of life, as we build a people + planet + future friendly enterprise"
                        }
                      </div>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__u8Fkr
                        )}
                        color={"white"}
                        endIcon={
                          <Icon38Icon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        }
                        shape={"rounded"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oOzB
                          )}
                        >
                          {"Wanna know how we do it?"}
                        </div>
                      </Button2>
                    </p.Stack>
                  </div>
                </div>
              </div>
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "fullpageheight",
    "categoryCollection",
    "marquee",
    "svg"
  ],
  fullPage: [
    "fullPage",
    "fullpageheight",
    "categoryCollection",
    "marquee",
    "svg"
  ],
  fullpageheight: ["fullpageheight"],
  categoryCollection: ["categoryCollection"],
  marquee: ["marquee"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  fullpageheight: typeof Fullpageheight;
  categoryCollection: typeof CategoryCollection;
  marquee: typeof Marquee;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    fullpageheight: makeNodeComponent("fullpageheight"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    marquee: makeNodeComponent("marquee"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
