/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: HsoJyy15p4bPd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import FullpageheightSlide from "../../FullpageheightSlide"; // plasmic-import: 50I_Uslx5bS3/component
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import Blackyellowborder from "../../Blackyellowborder"; // plasmic-import: qeyEUvMFwY/component
import { CategoryCollection } from "@plasmicpkgs/commerce";
import Marquee from "react-fast-marquee"; // plasmic-import: m9EkGU-jS0/codeComponent
import FullpagewidthSlide from "../../FullpagewidthSlide"; // plasmic-import: DUKvgkpbeBWf/component
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component
import CategoryProductsSlider from "../../CategoryProductsSlider"; // plasmic-import: 3Ndtrkcj4d1_/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { ProductBox } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductCollection } from "@plasmicpkgs/commerce";
import SurpriseMeButton from "../../SurpriseMeButton"; // plasmic-import: cuLrZTUy4Zrk/component
import HeaderSlide from "../../HeaderSlide"; // plasmic-import: dIysgpuSQtRE/component
import { AntdSliderMark } from "@plasmicpkgs/antd5/skinny/registerSlider";

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HsoJyy15p4bPd/css

import PreviousHeaderButtonSvgIcon from "./icons/PlasmicIcon__PreviousHeaderButtonSvg"; // plasmic-import: z1uPvBfdo2RJ/icon
import NextHeaderButtonSvgIcon from "./icons/PlasmicIcon__NextHeaderButtonSvg"; // plasmic-import: yJKrBu9wLCwe/icon
import PreviousArrowIcon from "./icons/PlasmicIcon__PreviousArrow"; // plasmic-import: ESn-GSFA8a73/icon
import NextArrowIcon from "./icons/PlasmicIcon__NextArrow"; // plasmic-import: igWE0GYF7JlT/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  fullPage?: Flex__<typeof FullPage>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  previous?: Flex__<"svg">;
  next?: Flex__<"svg">;
  categoriesDataProvider?: Flex__<typeof CategoryCollection>;
  shopCategoriesSlides?: Flex__<typeof SliderWrapper>;
  span?: Flex__<"span">;
  sliderCarousel3?: Flex__<typeof SliderWrapper>;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  dataProvider?: Flex__<typeof DataProvider>;
  sliderCarousel8?: Flex__<typeof SliderWrapper>;
  productCollection?: Flex__<typeof ProductCollection>;
  surpriseMeButton?: Flex__<typeof SurpriseMeButton>;
  sliderCarousel6?: Flex__<typeof SliderWrapper>;
  sliderMark?: Flex__<typeof AntdSliderMark>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "shopCategoriesSlides.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "shopCategoriesSlides",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel3.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel3",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel6.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel6",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "randomProducts",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sliderCarousel8.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? 1 : 0,

        refName: "sliderCarousel8",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zflhR)}>
              {(() => {
                const child$Props = {
                  adaptiveHeight: false,
                  arrows: false,
                  autoplay: true,
                  autoplaySpeed: 2000,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  draggable: true,
                  fade: false,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  pauseOnFocus: true,
                  pauseOnHover: true,
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  slidesToScroll: 1,
                  slidesToShow: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? 1
                    : 2,
                  swipe: true,
                  swipeToSlide: true,
                  touchMove: true
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__fmp4
                      )}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__loRam
                        )}
                        component={Link}
                        href={`/product/${"my-precious-baby-collar"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__a3Vuy)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerRoseCollarWebp.webp",
                            fullWidth: 2660,
                            fullHeight: 3489,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__gwBsl
                      )}
                      slot={"Mehfil Lights"}
                      slot2={"Pre lit fabric cigarettes"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__qqfE8
                        )}
                        component={Link}
                        href={`/product/${"mehfil-lights-fabric-suttas"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__maMc)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerMehfilLightsCigarettesWebp.webp",
                            fullWidth: 2660,
                            fullHeight: 3491,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      slot={"Bucket Hats"}
                      slot2={"Reversible Topis in lots of juicy colours"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__wyWZm
                        )}
                        component={Link}
                        href={`/category/${"bucket-hats"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fbuK1)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerYellowOrangeBucketHatWebp.webp",
                            fullWidth: 2663,
                            fullHeight: 3500,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide___41ZTe
                      )}
                      slot={"Custom Heart  Chakhna"}
                      slot2={"Get any embroidered text of your choice"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__xVpH
                        )}
                        component={Link}
                        href={`/product/${"customisable-hearts"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kn1Ug)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerCustomHeartsWebp.webp",
                            fullWidth: 2659,
                            fullHeight: 3488,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__eG5Ig
                      )}
                      slot={"Aashiq Topi"}
                      slot2={"Dedicated to all you lovers out there"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___3PNaq
                        )}
                        component={Link}
                        href={`/category/${"caps"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___5Al6)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerAashiqCapLavenderWebp.webp",
                            fullWidth: 2659,
                            fullHeight: 3488,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__qbHhl
                      )}
                      slot={"AASHIQ TOPI"}
                      slot2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zaZ6K
                          )}
                        >
                          {"Available in lots of different flavours and sizes"}
                        </div>
                      }
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___3Dryk
                        )}
                        component={Link}
                        href={`/category/${"caps"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ez6Ph)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerCapsAnimationWebp.webp",
                            fullWidth: 2111,
                            fullHeight: 2767,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__lfSj
                      )}
                      slot={"Photo Frames"}
                      slot2={"For all your special memories"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__pPqLb
                        )}
                        component={Link}
                        href={`/category/${"decor"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__hGljC)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerHeartFrameWebp.webp",
                            fullWidth: 2659,
                            fullHeight: 3488,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                    <FullpageheightSlide
                      className={classNames(
                        "__wab_instance",
                        sty.fullpageheightSlide__bZeW8
                      )}
                      slot={"Tote-e-Dil"}
                      slot2={"For all your baggage"}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__nkiim
                        )}
                        component={Link}
                        href={`/category/${"bags"}`}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___7ZkK3)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/jbs_storefront/images/bannerDilToteWebp.webp",
                            fullWidth: 2659,
                            fullHeight: 3488,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </FullpageheightSlide>
                  </SliderWrapper>
                );
              })()}
              <PreviousHeaderButtonSvgIcon
                className={classNames(projectcss.all, sty.svg__lgbjd)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runActionOnSliderCarousel"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "sliderCarousel",
                          action: "slickPrev"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnSliderCarousel"] != null &&
                    typeof $steps["runActionOnSliderCarousel"] === "object" &&
                    typeof $steps["runActionOnSliderCarousel"].then ===
                      "function"
                  ) {
                    $steps["runActionOnSliderCarousel"] = await $steps[
                      "runActionOnSliderCarousel"
                    ];
                  }
                }}
                role={"img"}
              />

              <NextHeaderButtonSvgIcon
                className={classNames(projectcss.all, sty.svg__psPx1)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runActionOnSliderCarousel"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "sliderCarousel",
                          action: "slickNext"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnSliderCarousel"] != null &&
                    typeof $steps["runActionOnSliderCarousel"] === "object" &&
                    typeof $steps["runActionOnSliderCarousel"].then ===
                      "function"
                  ) {
                    $steps["runActionOnSliderCarousel"] = await $steps[
                      "runActionOnSliderCarousel"
                    ];
                  }

                  $steps["runElementAction"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runElementAction"] != null &&
                    typeof $steps["runElementAction"] === "object" &&
                    typeof $steps["runElementAction"].then === "function"
                  ) {
                    $steps["runElementAction"] = await $steps[
                      "runElementAction"
                    ];
                  }
                }}
                role={"img"}
              />
            </div>
            <Section
              className={classNames("__wab_instance", sty.section__mx0KU)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder___5EFoi
                )}
                play={false}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___4WQdg)}
              >
                <div className={classNames(projectcss.all, sty.column__kfmfc)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___7Ge68)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/loveYouForever2.png",
                      fullWidth: 1592,
                      fullHeight: 863,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__mrg13)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___58ZP
                    )}
                  >
                    {
                      "Welcome to Juhu Beach Studio!\nWe love to love thingsss. So for our first ever collection, we present to you products inspired by all the things we will literally love forever."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__gmrMn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___89TRu
                    )}
                  >
                    {
                      "Creatures and characters of the city, romantic love & the lack of it, our four legged children, nature, love for your work, yourself, your friends, and v. imp the love of a beautifully crafted object."
                    }
                  </div>
                </div>
              </Stack__>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__xJgV)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__mUb0
                )}
                play={false}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ai3H)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hEo1L)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/jbs_storefront/images/beachBg.webp",
                    fullWidth: 4096,
                    fullHeight: 1533,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___9Qpdv)}
                >
                  <PreviousArrowIcon
                    data-plasmic-name={"previous"}
                    data-plasmic-override={overrides.previous}
                    className={classNames(projectcss.all, sty.previous)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runActionOnSliderCarousel2"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "shopCategoriesSlides",
                              action: "slickPrev"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnSliderCarousel2"] != null &&
                        typeof $steps["runActionOnSliderCarousel2"] ===
                          "object" &&
                        typeof $steps["runActionOnSliderCarousel2"].then ===
                          "function"
                      ) {
                        $steps["runActionOnSliderCarousel2"] = await $steps[
                          "runActionOnSliderCarousel2"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fLro1
                    )}
                  >
                    {"Shop Categories"}
                  </div>
                  <NextArrowIcon
                    data-plasmic-name={"next"}
                    data-plasmic-override={overrides.next}
                    className={classNames(projectcss.all, sty.next)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runActionOnSliderCarousel2"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "shopCategoriesSlides",
                              action: "slickNext"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnSliderCarousel2"] != null &&
                        typeof $steps["runActionOnSliderCarousel2"] ===
                          "object" &&
                        typeof $steps["runActionOnSliderCarousel2"].then ===
                          "function"
                      ) {
                        $steps["runActionOnSliderCarousel2"] = await $steps[
                          "runActionOnSliderCarousel2"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <CategoryCollection
                  data-plasmic-name={"categoriesDataProvider"}
                  data-plasmic-override={overrides.categoriesDataProvider}
                  className={classNames(
                    "__wab_instance",
                    sty.categoriesDataProvider
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q4Ri
                          )}
                        >
                          {"No collection found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ygp1L
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={true}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        const child$Props = {
                          arrowColor: true
                            ? "var(--antd-colorWhite)"
                            : undefined,
                          arrows: false,
                          autoplay: true,
                          autoplaySpeed: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? 1500
                            : 2000,
                          beforeChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "currentSlide",
                              ["shopCategoriesSlides", "currentSlide"],
                              SliderWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          centerMode: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? true
                            : false,
                          centerPadding: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? "30px"
                            : undefined,
                          className: classNames(
                            "__wab_instance",
                            sty.shopCategoriesSlides
                          ),
                          dots: false,
                          initialSlide: generateStateValueProp($state, [
                            "shopCategoriesSlides",
                            "currentSlide"
                          ]),
                          pauseOnDotsHover: false,
                          pauseOnFocus: true,
                          pauseOnHover: true,
                          ref: ref => {
                            $refs["shopCategoriesSlides"] = ref;
                          },
                          sliderScopeClassName:
                            sty["shopCategoriesSlides__slider"],
                          slidesToScroll: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? 1
                            : 3,
                          slidesToShow: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? 2
                            : 5,
                          swipeToSlide: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? false
                            : true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "currentSlide",
                              plasmicStateName:
                                "shopCategoriesSlides.currentSlide"
                            }
                          ],
                          [],
                          SliderWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <SliderWrapper
                            data-plasmic-name={"shopCategoriesSlides"}
                            data-plasmic-override={
                              overrides.shopCategoriesSlides
                            }
                            {...child$Props}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.categories.filter(
                                    category => category.name !== "Headwear"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <span
                                  data-plasmic-name={"span"}
                                  data-plasmic-override={overrides.span}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    sty.span
                                  )}
                                  key={currentIndex}
                                >
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link__fhh6D
                                    )}
                                    component={Link}
                                    href={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? `/category/${(() => {
                                            try {
                                              return currentItem.slug;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}`
                                        : `/category/${(() => {
                                            try {
                                              return currentItem.slug;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}`
                                    }
                                    platform={"nextjs"}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img___1TGgh)}
                                      displayHeight={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "100%"
                                          : "100%"
                                      }
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"none"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"100%"}
                                      src={(() => {
                                        try {
                                          return currentItem.images[0].url;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___8Bsa7
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </PlasmicLink__>
                                </span>
                              );
                            })}
                          </SliderWrapper>
                        );
                      })()
                    }
                  </DataCtxReader__>
                </CategoryCollection>
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__kbatp)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jv4Mt)}>
                <Marquee autoFill={true} direction={"right"} play={true}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sH11P
                    )}
                  >
                    {
                      "Discount code for the first 100 shoppers \u2728 SWEEDY \u2728 "
                    }
                  </div>
                </Marquee>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lGztE)}>
                {(() => {
                  const child$Props = {
                    arrows: false,
                    autoplay: true,
                    autoplaySpeed: 2000,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel3", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: false,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel3
                    ),
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel3",
                      "currentSlide"
                    ]),
                    pauseOnDotsHover: true,
                    ref: ref => {
                      $refs["sliderCarousel3"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel3__slider"]
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel3.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel3"}
                      data-plasmic-override={overrides.sliderCarousel3}
                      {...child$Props}
                    >
                      <FullpagewidthSlide
                        className={classNames(
                          "__wab_instance",
                          sty.fullpagewidthSlide__ozUiu
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__xhgra)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/jbs_storefront/images/chakhnaCatWebp.webp",
                                  fullWidth: 856,
                                  fullHeight: 1254,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/jbs_storefront/images/catChakhnaDesktop.png",
                                  fullWidth: 5319,
                                  fullHeight: 2949,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </FullpagewidthSlide>
                      <FullpagewidthSlide
                        className={classNames(
                          "__wab_instance",
                          sty.fullpagewidthSlide___3IreU
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__yv4Fp)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/jbs_storefront/images/chakhnaAntsWebp.webp",
                                  fullWidth: 5375,
                                  fullHeight: 7960,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/jbs_storefront/images/bannerChaknaAntsDesktop.png",
                                  fullWidth: 5319,
                                  fullHeight: 2943,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </FullpagewidthSlide>
                      <FullpagewidthSlide
                        className={classNames(
                          "__wab_instance",
                          sty.fullpagewidthSlide__rOnB
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___5Sw5)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/jbs_storefront/images/bannerChakhnaSlippersWebp.webp",
                                  fullWidth: 855,
                                  fullHeight: 1255,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/jbs_storefront/images/bannerChaknaSlippersDesktop.png",
                                  fullWidth: 5319,
                                  fullHeight: 2948,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </FullpagewidthSlide>
                    </SliderWrapper>
                  );
                })()}
                <NextHeaderButtonSvgIcon
                  className={classNames(projectcss.all, sty.svg__dA3So)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runActionOnSliderCarousel3"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "sliderCarousel3",
                            action: "slickNext"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnSliderCarousel3"] != null &&
                      typeof $steps["runActionOnSliderCarousel3"] ===
                        "object" &&
                      typeof $steps["runActionOnSliderCarousel3"].then ===
                        "function"
                    ) {
                      $steps["runActionOnSliderCarousel3"] = await $steps[
                        "runActionOnSliderCarousel3"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <PreviousHeaderButtonSvgIcon
                  className={classNames(projectcss.all, sty.svg__nmgH)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runActionOnSliderCarousel3"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "sliderCarousel3",
                            action: "slickPrev"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnSliderCarousel3"] != null &&
                      typeof $steps["runActionOnSliderCarousel3"] ===
                        "object" &&
                      typeof $steps["runActionOnSliderCarousel3"].then ===
                        "function"
                    ) {
                      $steps["runActionOnSliderCarousel3"] = await $steps[
                        "runActionOnSliderCarousel3"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div className={classNames(projectcss.all, sty.freeBox__aKsCx)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eymJe
                    )}
                  >
                    {"Presenting"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mHaDk)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "Chakhna",
                      value: args.slot,
                      className: classNames(sty.slotTargetSlot)
                    })}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l88HA)}
                  >
                    {renderPlasmicSlot({
                      defaultContents:
                        "Life is a party, these are the snacks \nOur delightful new Textile Collectibles ",
                      value: args.slot2,
                      className: classNames(sty.slotTargetSlot2)
                    })}
                  </div>
                  {renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__fCyO0
                        )}
                        color={"redJbs"}
                        link={`/category/${"chakhna"}`}
                        size={"compact"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kNkvs
                          )}
                        >
                          {"Shop all Chakhna"}
                        </div>
                      </Button>
                    ),
                    value: args.slot3
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vqZiR)}>
                <CategoryProductsSlider
                  className={classNames(
                    "__wab_instance",
                    sty.categoryProductsSlider__e2Pml
                  )}
                />
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___3Ew)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__pkIu4
                )}
              />

              <Section
                className={classNames("__wab_instance", sty.section__qiHuq)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yw83G)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qlm1G)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jbs_storefront/images/floweryBg2.webp",
                      fullWidth: 4096,
                      fullHeight: 2359,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tKuc
                    )}
                  >
                    {"Looking for something different?"}
                  </div>
                  <GraphqlFetcher
                    data-plasmic-name={"graphQlFetcher"}
                    data-plasmic-override={overrides.graphQlFetcher}
                    className={classNames("__wab_instance", sty.graphQlFetcher)}
                    dataName={"productsData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => "Error fetching data"}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    headers={{
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      "X-Shopify-Storefront-Access-Token":
                        "0f43cbfd628ae6e4fef6a34969378290"
                    }}
                    loadingDisplay={
                      <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                    }
                    method={"POST"}
                    noLayout={true}
                    query={{
                      query:
                        "query getProductsWithFilter($first: Int = 250) {\n  products(first: $first) {\n    edges {\n      node {\n        id\n        handle\n        title\n        collections(first: 10) {\n          edges {\n            node {\n              title\n              handle\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
                      variables: { name: "Rick Sanchez" }
                    }}
                    queryKey={"productsData"}
                    url={
                      "https://juhubeachstudio.myshopify.com/api/2022-07/graphql.json"
                    }
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <DataProvider
                          data-plasmic-name={"dataProvider"}
                          data-plasmic-override={overrides.dataProvider}
                          className={classNames(
                            "__wab_instance",
                            sty.dataProvider
                          )}
                          data={(() => {
                            try {
                              return (() => {
                                const selectedElements = [
                                  {
                                    node: {
                                      id: "gid://shopify/Product/8560343253288"
                                    }
                                  },
                                  {
                                    node: {
                                      id: "gid://shopify/Product/8560484090152"
                                    }
                                  },
                                  {
                                    node: {
                                      id: "gid://shopify/Product/8560869015848"
                                    }
                                  }
                                ];

                                return selectedElements;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {};
                              }
                              throw e;
                            }
                          })()}
                          name={"randomProducts"}
                        >
                          <DataCtxReader__>
                            {$ctx => (
                              <React.Fragment>
                                {false ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mY9K3
                                    )}
                                    onLoad={async event => {
                                      const $steps = {};

                                      $steps["refreshData"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              queryInvalidation: [
                                                "plasmic_refresh_all"
                                              ]
                                            };
                                            return (async ({
                                              queryInvalidation
                                            }) => {
                                              if (!queryInvalidation) {
                                                return;
                                              }
                                              await plasmicInvalidate(
                                                queryInvalidation
                                              );
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["refreshData"] != null &&
                                        typeof $steps["refreshData"] ===
                                          "object" &&
                                        typeof $steps["refreshData"].then ===
                                          "function"
                                      ) {
                                        $steps["refreshData"] = await $steps[
                                          "refreshData"
                                        ];
                                      }
                                    }}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return (() => {
                                            return JSON.parse(
                                              $state.randomProducts
                                            );
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const product = __plasmic_item_0;
                                        const productIndex = __plasmic_idx_0;
                                        return (
                                          <ProductBox
                                            className={classNames(
                                              "__wab_instance",
                                              sty.productBox__jHCvw
                                            )}
                                            id={(() => {
                                              try {
                                                return product.node.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            key={productIndex}
                                          >
                                            <DataCtxReader__>
                                              {$ctx => (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__iPIzG
                                                  )}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["goToProductPage"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              destination: `/product/${(() => {
                                                                try {
                                                                  return $ctx
                                                                    .currentProduct
                                                                    .slug;
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()}`
                                                            };
                                                            return (({
                                                              destination
                                                            }) => {
                                                              if (
                                                                typeof destination ===
                                                                  "string" &&
                                                                destination.startsWith(
                                                                  "#"
                                                                )
                                                              ) {
                                                                document
                                                                  .getElementById(
                                                                    destination.substr(
                                                                      1
                                                                    )
                                                                  )
                                                                  .scrollIntoView(
                                                                    {
                                                                      behavior:
                                                                        "smooth"
                                                                    }
                                                                  );
                                                              } else {
                                                                __nextRouter?.push(
                                                                  destination
                                                                );
                                                              }
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "goToProductPage"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "goToProductPage"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "goToProductPage"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "goToProductPage"
                                                      ] = await $steps[
                                                        "goToProductPage"
                                                      ];
                                                    }
                                                  }}
                                                >
                                                  <ProductMedia
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.productMedia__yyLur
                                                    )}
                                                  />

                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__ov1U
                                                    )}
                                                  >
                                                    <ProductTextField
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.productTextField__edO8H
                                                      )}
                                                      field={"name"}
                                                    />
                                                  </div>
                                                </div>
                                              )}
                                            </DataCtxReader__>
                                          </ProductBox>
                                        );
                                      }
                                    )}
                                  </div>
                                ) : null}
                                {(() => {
                                  const child$Props = {
                                    accessibility: false,
                                    arrowColor: true
                                      ? "var(--antd-colorWhite)"
                                      : undefined,
                                    arrows: false,
                                    autoplay: false,
                                    autoplaySpeed: 10000,
                                    beforeChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "currentSlide",
                                        ["sliderCarousel8", "currentSlide"],
                                        SliderWrapper_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    centerMode: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.sliderCarousel8
                                    ),
                                    dots: false,
                                    infinite: false,
                                    initialSlide: generateStateValueProp(
                                      $state,
                                      ["sliderCarousel8", "currentSlide"]
                                    ),
                                    pauseOnHover: false,
                                    ref: ref => {
                                      $refs["sliderCarousel8"] = ref;
                                    },
                                    sliderScopeClassName:
                                      sty["sliderCarousel8__slider"],
                                    slidesToShow: hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? 1
                                      : 3,
                                    useTransform: false
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "currentSlide",
                                        plasmicStateName:
                                          "sliderCarousel8.currentSlide"
                                      }
                                    ],
                                    [],
                                    SliderWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <SliderWrapper
                                      data-plasmic-name={"sliderCarousel8"}
                                      data-plasmic-override={
                                        overrides.sliderCarousel8
                                      }
                                      {...child$Props}
                                    >
                                      <ProductBox
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productBox__t9I07
                                        )}
                                        id={(() => {
                                          try {
                                            return $ctx.randomProducts[0].node
                                              .id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__c4IAp
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["goToProductPage"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        destination: `/product/${(() => {
                                                          try {
                                                            return $ctx
                                                              .currentProduct
                                                              .slug;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })()}`
                                                      };
                                                      return (({
                                                        destination
                                                      }) => {
                                                        if (
                                                          typeof destination ===
                                                            "string" &&
                                                          destination.startsWith(
                                                            "#"
                                                          )
                                                        ) {
                                                          document
                                                            .getElementById(
                                                              destination.substr(
                                                                1
                                                              )
                                                            )
                                                            .scrollIntoView({
                                                              behavior: "smooth"
                                                            });
                                                        } else {
                                                          __nextRouter?.push(
                                                            destination
                                                          );
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["goToProductPage"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ].then === "function"
                                                ) {
                                                  $steps["goToProductPage"] =
                                                    await $steps[
                                                      "goToProductPage"
                                                    ];
                                                }
                                              }}
                                            >
                                              <ProductMedia
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productMedia__ocTb
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__onUu
                                                )}
                                              >
                                                <ProductTextField
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.productTextField__yBpdO
                                                  )}
                                                  field={"name"}
                                                />
                                              </div>
                                            </div>
                                          )}
                                        </DataCtxReader__>
                                      </ProductBox>
                                      <ProductBox
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productBox__j52G3
                                        )}
                                        id={(() => {
                                          try {
                                            return $ctx.randomProducts[1].node
                                              .id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__y6FFj
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["goToProductPage"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        destination: `/product/${(() => {
                                                          try {
                                                            return $ctx
                                                              .currentProduct
                                                              .slug;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })()}`
                                                      };
                                                      return (({
                                                        destination
                                                      }) => {
                                                        if (
                                                          typeof destination ===
                                                            "string" &&
                                                          destination.startsWith(
                                                            "#"
                                                          )
                                                        ) {
                                                          document
                                                            .getElementById(
                                                              destination.substr(
                                                                1
                                                              )
                                                            )
                                                            .scrollIntoView({
                                                              behavior: "smooth"
                                                            });
                                                        } else {
                                                          __nextRouter?.push(
                                                            destination
                                                          );
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["goToProductPage"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ].then === "function"
                                                ) {
                                                  $steps["goToProductPage"] =
                                                    await $steps[
                                                      "goToProductPage"
                                                    ];
                                                }
                                              }}
                                            >
                                              <ProductMedia
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productMedia__qK41
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__kxGkY
                                                )}
                                              >
                                                <ProductTextField
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.productTextField__tou45
                                                  )}
                                                  field={"name"}
                                                />
                                              </div>
                                            </div>
                                          )}
                                        </DataCtxReader__>
                                      </ProductBox>
                                      <ProductBox
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productBox__b5Wzj
                                        )}
                                        id={(() => {
                                          try {
                                            return $ctx.randomProducts[2].node
                                              .id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__yDyG
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["goToProductPage"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        destination: `/product/${(() => {
                                                          try {
                                                            return $ctx
                                                              .currentProduct
                                                              .slug;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })()}`
                                                      };
                                                      return (({
                                                        destination
                                                      }) => {
                                                        if (
                                                          typeof destination ===
                                                            "string" &&
                                                          destination.startsWith(
                                                            "#"
                                                          )
                                                        ) {
                                                          document
                                                            .getElementById(
                                                              destination.substr(
                                                                1
                                                              )
                                                            )
                                                            .scrollIntoView({
                                                              behavior: "smooth"
                                                            });
                                                        } else {
                                                          __nextRouter?.push(
                                                            destination
                                                          );
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["goToProductPage"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "goToProductPage"
                                                  ].then === "function"
                                                ) {
                                                  $steps["goToProductPage"] =
                                                    await $steps[
                                                      "goToProductPage"
                                                    ];
                                                }
                                              }}
                                            >
                                              <ProductMedia
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productMedia__igT2L
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___8I2PT
                                                )}
                                              >
                                                <ProductTextField
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.productTextField__xikAp
                                                  )}
                                                  field={"name"}
                                                />
                                              </div>
                                            </div>
                                          )}
                                        </DataCtxReader__>
                                      </ProductBox>
                                    </SliderWrapper>
                                  );
                                })()}
                              </React.Fragment>
                            )}
                          </DataCtxReader__>
                        </DataProvider>
                      )}
                    </DataCtxReader__>
                  </GraphqlFetcher>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h1Sbz)}
                  >
                    <ProductCollection
                      data-plasmic-name={"productCollection"}
                      data-plasmic-override={overrides.productCollection}
                      className={classNames(
                        "__wab_instance",
                        sty.productCollection
                      )}
                      emptyMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vDoyf
                              )}
                            >
                              {"No product found!"}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      loadingMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6Vrqb
                              )}
                            >
                              {"Loading..."}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      noAutoRepeat={true}
                      noLayout={true}
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <SurpriseMeButton
                            data-plasmic-name={"surpriseMeButton"}
                            data-plasmic-override={overrides.surpriseMeButton}
                            className={classNames(
                              "__wab_instance",
                              sty.surpriseMeButton
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToARandomProductPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/product/${(() => {
                                        try {
                                          return (() => {
                                            const randomProduct =
                                              $ctx.products[
                                                Math.floor(
                                                  Math.random() *
                                                    $ctx.products.length
                                                )
                                              ];
                                            return randomProduct.slug;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToARandomProductPage"] != null &&
                                typeof $steps["goToARandomProductPage"] ===
                                  "object" &&
                                typeof $steps["goToARandomProductPage"].then ===
                                  "function"
                              ) {
                                $steps["goToARandomProductPage"] = await $steps[
                                  "goToARandomProductPage"
                                ];
                              }
                            }}
                          />
                        )}
                      </DataCtxReader__>
                    </ProductCollection>
                  </div>
                </div>
              </Section>
              <Section
                className={classNames("__wab_instance", sty.section__gQ5Oc)}
              >
                <Blackyellowborder
                  className={classNames(
                    "__wab_instance",
                    sty.blackyellowborder__jNcp
                  )}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___7Uz0X)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mCkic)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__f3JA)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/heartFrameWebp.webp",
                        fullWidth: 1046,
                        fullHeight: 876,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zg89B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uhnki
                      )}
                    >
                      {
                        "All of our products make incredible gifts, \nhere are some of our favourites"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__uhJjf
                      )}
                      color={"redJbs"}
                      link={`/category/${"giftsss"}`}
                      size={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "compact"
                          : undefined
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qe6Fn
                        )}
                      >
                        {"gifts here!"}
                      </div>
                    </Button>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__b9AXi)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__p06FD)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jbs_storefront/images/strawberriesWebp.webp",
                        fullWidth: 1311,
                        fullHeight: 1326,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </Section>
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__khznS
                )}
              />
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section__xrVwI)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bx8Z5)}>
                {(() => {
                  const child$Props = {
                    arrows: false,
                    autoplay: true,
                    autoplaySpeed: 2000,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel6", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel6
                    ),
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel6",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel6"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel6__slider"],
                    swipeToSlide: true,
                    useCSS: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel6.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel6"}
                      data-plasmic-override={overrides.sliderCarousel6}
                      {...child$Props}
                    >
                      <HeaderSlide
                        className={classNames(
                          "__wab_instance",
                          sty.headerSlide__hJkVl
                        )}
                        slot={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dEnIl
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___32Kg5
                              )}
                            >
                              {"Bucket"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a5EqD
                              )}
                            >
                              {"Hats"}
                            </div>
                          </Stack__>
                        }
                        slot2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ihlPw
                            )}
                          >
                            {
                              "A Juhu Beach essential, gorgeous double sided bucket hats and their strange embroidered siblings"
                            }
                          </div>
                        }
                        slot3={
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__cjr7B
                            )}
                            color={"red"}
                            link={`/category/${"bucket-hats"}`}
                            size={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "compact"
                                : undefined
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__luFst
                              )}
                            >
                              {"Shop all Bucket Hats"}
                            </div>
                          </Button>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__adBiX
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__jb9Bo)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "auto"
                                : "auto"
                            }
                            displayMaxHeight={"100%"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            src={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? {
                                    src: "/plasmic/jbs_storefront/images/bannerHat1Mobile.png",
                                    fullWidth: 858,
                                    fullHeight: 1206,
                                    aspectRatio: undefined
                                  }
                                : {
                                    src: "/plasmic/jbs_storefront/images/bucketHatBannerWebp.webp",
                                    fullWidth: 4096,
                                    fullHeight: 2230,
                                    aspectRatio: undefined
                                  }
                            }
                          />
                        </div>
                      </HeaderSlide>
                      <HeaderSlide
                        className={classNames(
                          "__wab_instance",
                          sty.headerSlide__esgQ
                        )}
                        slot={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oCcH
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gW7Ez
                              )}
                            >
                              {"Flower"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Rj5D
                              )}
                            >
                              {"Topi"}
                            </div>
                          </Stack__>
                        }
                        slot2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ip4Eu
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "A whimsical flower shaped bucket hat,\ncuz you're literally a fairy,\n we made this just for you"
                              : "A whimsical flower shaped bucket hat,\ncuz you're literally a fairy, we made this just for you"}
                          </div>
                        }
                        slot3={
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__imimv
                            )}
                            color={"red"}
                            link={`/category/${"flower-hat"}`}
                            shadow={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? []
                                : undefined
                            }
                            size={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "compact"
                                : undefined
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tp8G6
                              )}
                            >
                              {"Shop all Flower Hats"}
                            </div>
                          </Button>
                        }
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__oRta7)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/jbs_storefront/images/bannerHat2Flipped.jpg",
                                  fullWidth: 858,
                                  fullHeight: 1206,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/jbs_storefront/images/flowerHatBanner.webp",
                                  fullWidth: 4096,
                                  fullHeight: 2230,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </HeaderSlide>
                    </SliderWrapper>
                  );
                })()}
                <PreviousHeaderButtonSvgIcon
                  className={classNames(projectcss.all, sty.svg__bnODj)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runActionOnSliderCarousel6"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "sliderCarousel6",
                            action: "slickPrev"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnSliderCarousel6"] != null &&
                      typeof $steps["runActionOnSliderCarousel6"] ===
                        "object" &&
                      typeof $steps["runActionOnSliderCarousel6"].then ===
                        "function"
                    ) {
                      $steps["runActionOnSliderCarousel6"] = await $steps[
                        "runActionOnSliderCarousel6"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <NextHeaderButtonSvgIcon
                  className={classNames(projectcss.all, sty.svg___1Z6PB)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runActionOnSliderCarousel6"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "sliderCarousel6",
                            action: "slickNext"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnSliderCarousel6"] != null &&
                      typeof $steps["runActionOnSliderCarousel6"] ===
                        "object" &&
                      typeof $steps["runActionOnSliderCarousel6"].then ===
                        "function"
                    ) {
                      $steps["runActionOnSliderCarousel6"] = await $steps[
                        "runActionOnSliderCarousel6"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gnDfX)}>
                <CategoryProductsSlider
                  category={"gid://shopify/Collection/467855180072"}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryProductsSlider__vVg8
                  )}
                />
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___8R1Ui)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__jk7P
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__qfSeR)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___7SH7
                  )}
                  component={Link}
                  href={`/product/${"mystery-box"}`}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns___3CEa3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__yyv49)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__zl0Fd)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "120px"
                            : "189px"
                        }
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "none"
                        }
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "219px"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "120px"
                            : "100%"
                        }
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/jbs_storefront/images/clamWebp.webp",
                          fullWidth: 2000,
                          fullHeight: 3496,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__by8Ox)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__fdlkx)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "1000px"
                        }
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/jbs_storefront/images/asset94Png2.png",
                          fullWidth: 2822,
                          fullHeight: 588,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                </PlasmicLink__>
              </div>
            </Section>
            <Section
              className={classNames("__wab_instance", sty.section___4UKse)}
            >
              <Blackyellowborder
                className={classNames(
                  "__wab_instance",
                  sty.blackyellowborder__cPg8
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__r9H7F)}>
                <Marquee autoFill={true} direction={"right"}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dHqP3
                    )}
                  >
                    {
                      " made from waste // women run // limited editions // handcrafted in mumbai //"
                    }
                  </div>
                </Marquee>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__riipX)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__gx5Wa)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/jbs_storefront/images/seaOfWasteWideNewWebp.webp",
                    fullWidth: 5339,
                    fullHeight: 2036,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tPjZ4)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/jbs_storefront/images/seaOfWasteNarrowWebp.webp",
                    fullWidth: 860,
                    fullHeight: 1038,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gNDo7)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__mkbQx)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__ejCnz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aBxSm
                      )}
                    >
                      {
                        "Juhu Beach Studio is a tiny studio based in Mumbai, and we work exclusively with all kinds of textile waste (above) :O"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__f9Q7Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cQmWl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Our brand celebrates the weird and wonderful conceptness of life through delightful, handcrafted lifestyle accessory products."
                        : "Our brand celebrates the weird and wonderful concept-ness of life through delightful, handcrafted lifestyle accessory products."}
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__uGeWu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eFLx4
                      )}
                    >
                      {
                        "Exploring textile waste as a raw material for a scaleable + sustainable enterprise."
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__u8Fkr
                      )}
                      color={"redJbs"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__yru8)}
                          role={"img"}
                        />
                      }
                      link={`/about`}
                      showEndIcon={true}
                      size={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "compact"
                          : undefined
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kaKiF
                        )}
                      >
                        {"Want to know how we do it?"}
                      </div>
                    </Button>
                  </Stack__>
                </Stack__>
                <AntdSliderMark
                  data-plasmic-name={"sliderMark"}
                  data-plasmic-override={overrides.sliderMark}
                  className={classNames("__wab_instance", sty.sliderMark)}
                />
              </Stack__>
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "sliderCarousel",
    "previous",
    "next",
    "categoriesDataProvider",
    "shopCategoriesSlides",
    "span",
    "sliderCarousel3",
    "graphQlFetcher",
    "dataProvider",
    "sliderCarousel8",
    "productCollection",
    "surpriseMeButton",
    "sliderCarousel6",
    "sliderMark"
  ],
  fullPage: [
    "fullPage",
    "sliderCarousel",
    "previous",
    "next",
    "categoriesDataProvider",
    "shopCategoriesSlides",
    "span",
    "sliderCarousel3",
    "graphQlFetcher",
    "dataProvider",
    "sliderCarousel8",
    "productCollection",
    "surpriseMeButton",
    "sliderCarousel6",
    "sliderMark"
  ],
  sliderCarousel: ["sliderCarousel"],
  previous: ["previous"],
  next: ["next"],
  categoriesDataProvider: [
    "categoriesDataProvider",
    "shopCategoriesSlides",
    "span"
  ],
  shopCategoriesSlides: ["shopCategoriesSlides", "span"],
  span: ["span"],
  sliderCarousel3: ["sliderCarousel3"],
  graphQlFetcher: ["graphQlFetcher", "dataProvider", "sliderCarousel8"],
  dataProvider: ["dataProvider", "sliderCarousel8"],
  sliderCarousel8: ["sliderCarousel8"],
  productCollection: ["productCollection", "surpriseMeButton"],
  surpriseMeButton: ["surpriseMeButton"],
  sliderCarousel6: ["sliderCarousel6"],
  sliderMark: ["sliderMark"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  sliderCarousel: typeof SliderWrapper;
  previous: "svg";
  next: "svg";
  categoriesDataProvider: typeof CategoryCollection;
  shopCategoriesSlides: typeof SliderWrapper;
  span: "span";
  sliderCarousel3: typeof SliderWrapper;
  graphQlFetcher: typeof GraphqlFetcher;
  dataProvider: typeof DataProvider;
  sliderCarousel8: typeof SliderWrapper;
  productCollection: typeof ProductCollection;
  surpriseMeButton: typeof SurpriseMeButton;
  sliderCarousel6: typeof SliderWrapper;
  sliderMark: typeof AntdSliderMark;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    previous: makeNodeComponent("previous"),
    next: makeNodeComponent("next"),
    categoriesDataProvider: makeNodeComponent("categoriesDataProvider"),
    shopCategoriesSlides: makeNodeComponent("shopCategoriesSlides"),
    span: makeNodeComponent("span"),
    sliderCarousel3: makeNodeComponent("sliderCarousel3"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    dataProvider: makeNodeComponent("dataProvider"),
    sliderCarousel8: makeNodeComponent("sliderCarousel8"),
    productCollection: makeNodeComponent("productCollection"),
    surpriseMeButton: makeNodeComponent("surpriseMeButton"),
    sliderCarousel6: makeNodeComponent("sliderCarousel6"),
    sliderMark: makeNodeComponent("sliderMark"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
