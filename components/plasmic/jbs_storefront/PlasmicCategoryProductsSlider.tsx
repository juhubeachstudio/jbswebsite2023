// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: 3Ndtrkcj4d1_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductCollection } from "@plasmicpkgs/commerce";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import ProductInSlider from "../../ProductInSlider"; // plasmic-import: p75X7EWJ1KaV/component

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicCategoryProductsSlider.module.css"; // plasmic-import: 3Ndtrkcj4d1_/css

createPlasmicElementProxy;

export type PlasmicCategoryProductsSlider__VariantMembers = {};
export type PlasmicCategoryProductsSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategoryProductsSlider__VariantsArgs;
export const PlasmicCategoryProductsSlider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCategoryProductsSlider__ArgsType = {
  category?: "Dynamic options";
};
type ArgPropType = keyof PlasmicCategoryProductsSlider__ArgsType;
export const PlasmicCategoryProductsSlider__ArgProps = new Array<ArgPropType>(
  "category"
);

export type PlasmicCategoryProductsSlider__OverridesType = {
  root?: p.Flex<"div">;
  productCollection?: p.Flex<typeof ProductCollection>;
  sliderCarousel?: p.Flex<typeof SliderWrapper>;
  productInSlider?: p.Flex<typeof ProductInSlider>;
};

export interface DefaultCategoryProductsSliderProps {
  category?: "Dynamic options";
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategoryProductsSlider__RenderFunc(props: {
  variants: PlasmicCategoryProductsSlider__VariantsArgs;
  args: PlasmicCategoryProductsSlider__ArgsType;
  overrides: PlasmicCategoryProductsSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          category: "gid://shopify/Collection/456658977064"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      },
      {
        path: "hovered",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ProductCollection
        data-plasmic-name={"productCollection"}
        data-plasmic-override={overrides.productCollection}
        category={args.category}
        className={classNames("__wab_instance", sty.productCollection)}
        emptyMessage={
          <ph.DataCtxReader>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tIwoj
                )}
              >
                {"No product found!"}
              </div>
            )}
          </ph.DataCtxReader>
        }
        loadingMessage={
          <ph.DataCtxReader>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ksPSu
                )}
              >
                {"Loading..."}
              </div>
            )}
          </ph.DataCtxReader>
        }
        noAutoRepeat={true}
        noLayout={true}
      >
        <ph.DataCtxReader>
          {$ctx =>
            (() => {
              const child$Props = {
                arrows: false,
                autoplay: true,
                autoplaySpeed: 1500,
                beforeChange: p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ),
                className: classNames("__wab_instance", sty.sliderCarousel),
                initialSlide: p.generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                sliderScopeClassName: sty["sliderCarousel__slider"],
                slidesPerRow: hasVariant(globalVariants, "screen", "mobileOnly")
                  ? 3
                  : 5,
                slidesToScroll: 3
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.products;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <ProductInSlider
                        data-plasmic-name={"productInSlider"}
                        data-plasmic-override={overrides.productInSlider}
                        className={classNames(
                          "__wab_instance",
                          sty.productInSlider
                        )}
                        currentItem={currentItem}
                        key={currentIndex}
                      />
                    );
                  })}
                </SliderWrapper>
              );
            })()
          }
        </ph.DataCtxReader>
      </ProductCollection>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "productCollection", "sliderCarousel", "productInSlider"],
  productCollection: ["productCollection", "sliderCarousel", "productInSlider"],
  sliderCarousel: ["sliderCarousel", "productInSlider"],
  productInSlider: ["productInSlider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  productCollection: typeof ProductCollection;
  sliderCarousel: typeof SliderWrapper;
  productInSlider: typeof ProductInSlider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategoryProductsSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategoryProductsSlider__VariantsArgs;
    args?: PlasmicCategoryProductsSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategoryProductsSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategoryProductsSlider__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategoryProductsSlider__ArgProps,
          internalVariantPropNames: PlasmicCategoryProductsSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategoryProductsSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategoryProductsSlider";
  } else {
    func.displayName = `PlasmicCategoryProductsSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicCategoryProductsSlider = Object.assign(
  // Top-level PlasmicCategoryProductsSlider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productCollection: makeNodeComponent("productCollection"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    productInSlider: makeNodeComponent("productInSlider"),

    // Metadata about props expected for PlasmicCategoryProductsSlider
    internalVariantProps: PlasmicCategoryProductsSlider__VariantProps,
    internalArgProps: PlasmicCategoryProductsSlider__ArgProps
  }
);

export default PlasmicCategoryProductsSlider;
/* prettier-ignore-end */
