// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: znFTM0nXx5O6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: Y6q1pqli4zM/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicSpecialInstructionsInput.module.css"; // plasmic-import: znFTM0nXx5O6/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: iGJtLc9clP/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon

createPlasmicElementProxy;

export type PlasmicSpecialInstructionsInput__VariantMembers = {};
export type PlasmicSpecialInstructionsInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicSpecialInstructionsInput__VariantsArgs;
export const PlasmicSpecialInstructionsInput__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSpecialInstructionsInput__ArgsType = {};
type ArgPropType = keyof PlasmicSpecialInstructionsInput__ArgsType;
export const PlasmicSpecialInstructionsInput__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSpecialInstructionsInput__OverridesType = {
  textInput?: p.Flex<typeof TextInput>;
};

export interface DefaultSpecialInstructionsInputProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSpecialInstructionsInput__RenderFunc(props: {
  variants: PlasmicSpecialInstructionsInput__VariantsArgs;
  args: PlasmicSpecialInstructionsInput__ArgsType;
  overrides: PlasmicSpecialInstructionsInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <TextInput
      data-plasmic-name={"textInput"}
      data-plasmic-override={overrides.textInput}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.textInput)}
      onChange={(...eventArgs) => {
        p.generateStateOnChangeProp($state, ["textInput", "value"])(
          (e => e.target?.value).apply(null, eventArgs)
        );
      }}
      placeholder={'Example: Can you write "My Name" on the hat?'}
      type={"text"}
      value={p.generateStateValueProp($state, ["textInput", "value"]) ?? ""}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSpecialInstructionsInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSpecialInstructionsInput__VariantsArgs;
    args?: PlasmicSpecialInstructionsInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSpecialInstructionsInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSpecialInstructionsInput__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSpecialInstructionsInput__ArgProps,
          internalVariantPropNames:
            PlasmicSpecialInstructionsInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSpecialInstructionsInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textInput") {
    func.displayName = "PlasmicSpecialInstructionsInput";
  } else {
    func.displayName = `PlasmicSpecialInstructionsInput.${nodeName}`;
  }
  return func;
}

export const PlasmicSpecialInstructionsInput = Object.assign(
  // Top-level PlasmicSpecialInstructionsInput renders the root element
  makeNodeComponent("textInput"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSpecialInstructionsInput
    internalVariantProps: PlasmicSpecialInstructionsInput__VariantProps,
    internalArgProps: PlasmicSpecialInstructionsInput__ArgProps
  }
);

export default PlasmicSpecialInstructionsInput;
/* prettier-ignore-end */
