// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m

import * as React from "react";
import { getActiveVariation } from "@plasmicapp/react-web/lib/splits";
import { ScheduleContext } from "./PlasmicGlobalVariant__Schedule"; // plasmic-import: zd5JVdnkSq7D/globalVariant

type GetActiveVariationParams = Partial<
  Parameters<typeof getActiveVariation>[0]
>;

export interface PlasmicSplitsProviderProps extends GetActiveVariationParams {
  children?: React.ReactNode;
}

export const splits = [
  {
    id: "ShaqSCBmIkM9",
    name: "Schedule",
    projectId: "heL2P6rJiLNgtnBJPb6i1m",
    externalId: null,
    description: "Launching Soon (19 Dec 2023, 7pm)",
    pagesPaths: ["/", "/about", "/category/[slug]"],
    type: "segment",
    slices: [
      { id: "FdcbBB87JzKp", externalId: null, cond: {}, contents: [] },
      {
        id: "AxH7vLkCgpTD",
        externalId: null,
        cond: {
          "<=": [
            "2023-12-14T01:44:02.399Z",
            { var: "time" },
            "2023-12-19T13:30:00.000Z"
          ]
        },
        contents: [
          {
            type: "global-variant",
            projectId: "heL2P6rJiLNgtnBJPb6i1m",
            groupId: "zd5JVdnkSq7D",
            group: "Schedule",
            variant: "override"
          }
        ]
      }
    ]
  }
];

export function getGlobalContextValueFromVariation(
  groupId: string,
  variation: Record<string, string>
) {
  let groupValue: string | undefined = undefined;
  Object.keys(variation).forEach((variationKey: string) => {
    const [_type, splitId] = variationKey.split(".");
    const sliceId = variation[variationKey];
    const split = splits.find(
      s => s.id === splitId || s.externalId === splitId
    );
    if (split) {
      const slice = split.slices.find(
        s => s.id === sliceId || s.externalId === sliceId
      );
      if (slice) {
        const content = slice.contents.find(c => c.groupId === groupId);
        if (content) {
          groupValue = content.variant;
        }
      }
    }
  });
  return groupValue;
}

export default function PlasmicSplitsProvider(
  props: PlasmicSplitsProviderProps
) {
  const { children, traits, ...rest } = props;
  const variation = getActiveVariation({
    splits,
    traits: traits ?? {},
    ...rest
  });

  return (
    <>
      <ScheduleContext.Provider
        value={getGlobalContextValueFromVariation("zd5JVdnkSq7D", variation)}
      >
        {children}
      </ScheduleContext.Provider>
    </>
  );
}
