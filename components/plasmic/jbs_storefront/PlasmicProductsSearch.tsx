/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: V9g_ixtcrSzg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: Y6q1pqli4zM/component
import { ProductCollection } from "@plasmicpkgs/commerce";
import { ProductBox } from "@plasmicpkgs/commerce";
import ProductCardJbs from "../../ProductCardJbs"; // plasmic-import: Ft4Mem_Zab/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicProductsSearch.module.css"; // plasmic-import: V9g_ixtcrSzg/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: iGJtLc9clP/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ew07hyuAC0c/icon

createPlasmicElementProxy;

export type PlasmicProductsSearch__VariantMembers = {};
export type PlasmicProductsSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductsSearch__VariantsArgs;
export const PlasmicProductsSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicProductsSearch__ArgsType = {};
type ArgPropType = keyof PlasmicProductsSearch__ArgsType;
export const PlasmicProductsSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicProductsSearch__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<"form">;
  textInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  productCollection?: Flex__<typeof ProductCollection>;
  freeBox?: Flex__<"div">;
  productBox?: Flex__<typeof ProductBox>;
  productCardJbs?: Flex__<typeof ProductCardJbs>;
};

export interface DefaultProductsSearchProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductsSearch__RenderFunc(props: {
  variants: PlasmicProductsSearch__VariantsArgs;
  args: PlasmicProductsSearch__ArgsType;
  overrides: PlasmicProductsSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <form
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        className={classNames(projectcss.all, sty.form)}
      >
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput)}
          endIcon={
            <CheckSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          }
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async event => {
              const $steps = {};

              $steps["updateTextInputValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["textInput", "value"]
                      },
                      operation: 0,
                      value: $state.textInput.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTextInputValue"] != null &&
                typeof $steps["updateTextInputValue"] === "object" &&
                typeof $steps["updateTextInputValue"].then === "function"
              ) {
                $steps["updateTextInputValue"] = await $steps[
                  "updateTextInputValue"
                ];
              }
            }).apply(null, eventArgs);
          }}
          required={false}
          showStartIcon={true}
          type={"text"}
          value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
        />
      </form>
      <ProductCollection
        data-plasmic-name={"productCollection"}
        data-plasmic-override={overrides.productCollection}
        className={classNames("__wab_instance", sty.productCollection)}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1RTjJ
                )}
              >
                {"No product found!"}
              </div>
            )}
          </DataCtxReader__>
        }
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nMu0E
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
        noAutoRepeat={true}
        noLayout={false}
        sort={"trending-desc"}
      >
        <DataCtxReader__>
          {$ctx =>
            (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (
                    // to filter products based on the value in search bar
                    $ctx.products.filter(product =>
                      product.name
                        .toLowerCase()
                        .includes($state.textInput.value.trim().toLowerCase())
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentProduct = __plasmic_item_0;
              const productIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                  key={productIndex}
                >
                  <ProductBox
                    data-plasmic-name={"productBox"}
                    data-plasmic-override={overrides.productBox}
                    className={classNames("__wab_instance", sty.productBox)}
                    id={(() => {
                      try {
                        return currentProduct.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <ProductCardJbs
                          data-plasmic-name={"productCardJbs"}
                          data-plasmic-override={overrides.productCardJbs}
                          className={classNames(
                            "__wab_instance",
                            sty.productCardJbs
                          )}
                          currentItem={(() => {
                            try {
                              return currentProduct;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      )}
                    </DataCtxReader__>
                  </ProductBox>
                </div>
              );
            })
          }
        </DataCtxReader__>
      </ProductCollection>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "textInput",
    "svg",
    "productCollection",
    "freeBox",
    "productBox",
    "productCardJbs"
  ],
  form: ["form", "textInput", "svg"],
  textInput: ["textInput", "svg"],
  svg: ["svg"],
  productCollection: [
    "productCollection",
    "freeBox",
    "productBox",
    "productCardJbs"
  ],
  freeBox: ["freeBox", "productBox", "productCardJbs"],
  productBox: ["productBox", "productCardJbs"],
  productCardJbs: ["productCardJbs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  textInput: typeof TextInput;
  svg: "svg";
  productCollection: typeof ProductCollection;
  freeBox: "div";
  productBox: typeof ProductBox;
  productCardJbs: typeof ProductCardJbs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductsSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductsSearch__VariantsArgs;
    args?: PlasmicProductsSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductsSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductsSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductsSearch__ArgProps,
          internalVariantPropNames: PlasmicProductsSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductsSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductsSearch";
  } else {
    func.displayName = `PlasmicProductsSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicProductsSearch = Object.assign(
  // Top-level PlasmicProductsSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    productCollection: makeNodeComponent("productCollection"),
    freeBox: makeNodeComponent("freeBox"),
    productBox: makeNodeComponent("productBox"),
    productCardJbs: makeNodeComponent("productCardJbs"),

    // Metadata about props expected for PlasmicProductsSearch
    internalVariantProps: PlasmicProductsSearch__VariantProps,
    internalArgProps: PlasmicProductsSearch__ArgProps
  }
);

export default PlasmicProductsSearch;
/* prettier-ignore-end */
