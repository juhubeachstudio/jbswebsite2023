// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: 8lDLSe2pjxsn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import DocumentPage from "../../DocumentPage"; // plasmic-import: gApc9GaJbE-W/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicShippingPolicy.module.css"; // plasmic-import: 8lDLSe2pjxsn/css

createPlasmicElementProxy;

export type PlasmicShippingPolicy__VariantMembers = {};
export type PlasmicShippingPolicy__VariantsArgs = {};
type VariantPropType = keyof PlasmicShippingPolicy__VariantsArgs;
export const PlasmicShippingPolicy__VariantProps = new Array<VariantPropType>();

export type PlasmicShippingPolicy__ArgsType = {};
type ArgPropType = keyof PlasmicShippingPolicy__ArgsType;
export const PlasmicShippingPolicy__ArgProps = new Array<ArgPropType>();

export type PlasmicShippingPolicy__OverridesType = {
  root?: Flex__<"div">;
  fullPage?: Flex__<typeof FullPage>;
  documentPage?: Flex__<typeof DocumentPage>;
  text?: Flex__<"div">;
};

export interface DefaultShippingPolicyProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShippingPolicy__RenderFunc(props: {
  variants: PlasmicShippingPolicy__VariantsArgs;
  args: PlasmicShippingPolicy__ArgsType;
  overrides: PlasmicShippingPolicy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <DocumentPage
              data-plasmic-name={"documentPage"}
              data-plasmic-override={overrides.documentPage}
              className={classNames("__wab_instance", sty.documentPage)}
              slot={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "As soon as an order is placed and the payment has been completed, you will receive an email confirmation of the same.\nOnce the order is shipped, you will receive another order with the shipping and tracking details.\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Orders that require no customisation"}
                    </span>
                    <React.Fragment>
                      {
                        " will be shipped within 1 week of the order being placed, unless a reason for a delay is specifically mentioned along with the product. \nReasons such as - \n"
                      }
                    </React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__boVno
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__w8HY
                          )}
                        >
                          {
                            "If the product will be restocked and will be available within a week.\n"
                          }
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__bOs7R
                          )}
                        >
                          {"If the team is on a break."}
                        </li>
                      </ul>
                    }
                    <React.Fragment>
                      {
                        "\nOrders that require customisation, will be shipped within 2 weeks of the order being placed.\nUnless a reason for further delay is specifically mentioned along with the product.\n\nIn the case of extraordinary circumstances, orders may take longer to be shipped and you will be informed of the delay via email. Circumstances such as -\n"
                      }
                    </React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__l4Pk9
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__c4Tjc
                          )}
                        >
                          {"Bad weather in Mumbai"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__wu86F
                          )}
                        >
                          {"Pandemic, citywide, nationwide shutdown maybe"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___6V9W
                          )}
                        >
                          {"An unplanned leave of absence from work"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__nwi3U
                          )}
                        >
                          {"Something else that may come up"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              }
            >
              {"Shipping Policy"}
            </DocumentPage>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fullPage", "documentPage", "text"],
  fullPage: ["fullPage", "documentPage", "text"],
  documentPage: ["documentPage", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  documentPage: typeof DocumentPage;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShippingPolicy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShippingPolicy__VariantsArgs;
    args?: PlasmicShippingPolicy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShippingPolicy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShippingPolicy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShippingPolicy__ArgProps,
          internalVariantPropNames: PlasmicShippingPolicy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShippingPolicy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShippingPolicy";
  } else {
    func.displayName = `PlasmicShippingPolicy.${nodeName}`;
  }
  return func;
}

export const PlasmicShippingPolicy = Object.assign(
  // Top-level PlasmicShippingPolicy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    documentPage: makeNodeComponent("documentPage"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicShippingPolicy
    internalVariantProps: PlasmicShippingPolicy__VariantProps,
    internalArgProps: PlasmicShippingPolicy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShippingPolicy;
/* prettier-ignore-end */
