// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: PSeXEG18MHGr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import { CategoryCollection } from "@plasmicpkgs/commerce";
import { CategoryField } from "@plasmicpkgs/commerce";
import TextInput from "../../TextInput"; // plasmic-import: Y6q1pqli4zM/component
import { ProductCollection } from "@plasmicpkgs/commerce";
import { ProductBox } from "@plasmicpkgs/commerce";
import ProductCardJbs from "../../ProductCardJbs"; // plasmic-import: Ft4Mem_Zab/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component

import { ScheduleValue, useSchedule } from "./PlasmicGlobalVariant__Schedule"; // plasmic-import: zd5JVdnkSq7D/globalVariant
import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicCategory.module.css"; // plasmic-import: PSeXEG18MHGr/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: iGJtLc9clP/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicCategory__VariantMembers = {};
export type PlasmicCategory__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategory__VariantsArgs;
export const PlasmicCategory__VariantProps = new Array<VariantPropType>();

export type PlasmicCategory__ArgsType = {};
type ArgPropType = keyof PlasmicCategory__ArgsType;
export const PlasmicCategory__ArgProps = new Array<ArgPropType>();

export type PlasmicCategory__OverridesType = {
  root?: p.Flex<"div">;
  fullPage?: p.Flex<typeof FullPage>;
  section?: p.Flex<typeof Section>;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  categoryField?: p.Flex<typeof CategoryField>;
  textInput?: p.Flex<typeof TextInput>;
  productCollection?: p.Flex<typeof ProductCollection>;
  graphQlFetcher?: p.Flex<typeof GraphqlFetcher>;
};

export interface DefaultCategoryProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategory__RenderFunc(props: {
  variants: PlasmicCategory__VariantsArgs;
  args: PlasmicCategory__ArgsType;
  overrides: PlasmicCategory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    schedule: useSchedule(),
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_schedule_override]: hasVariant(
                globalVariants,
                "schedule",
                "override"
              )
            }
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <Section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames("__wab_instance", sty.section)}
            >
              <CategoryCollection
                data-plasmic-name={"categoryCollection"}
                data-plasmic-override={overrides.categoryCollection}
                category={(() => {
                  try {
                    return $ctx.params.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "gid://shopify/Collection/455454818600";
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.categoryCollection)}
                emptyMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Ayx
                        )}
                      >
                        {"No collection found!"}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                loadingMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kiNuJ
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zJ7Ys)}
                    >
                      <CategoryField
                        data-plasmic-name={"categoryField"}
                        data-plasmic-override={overrides.categoryField}
                        className={classNames(
                          "__wab_instance",
                          sty.categoryField
                        )}
                        field={"name"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vLBny
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          endIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___09M9S
                              )}
                              role={"img"}
                            />
                          }
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "textInput",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};

                              $steps["updateTextInputValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["textInput", "value"]
                                      },
                                      operation: 0,
                                      value: $state.textInput.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      p.set(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTextInputValue"] != null &&
                                typeof $steps["updateTextInputValue"] ===
                                  "object" &&
                                typeof $steps["updateTextInputValue"].then ===
                                  "function"
                              ) {
                                $steps["updateTextInputValue"] = await $steps[
                                  "updateTextInputValue"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          required={false}
                          showStartIcon={true}
                          type={"text"}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </div>
                      <ProductCollection
                        data-plasmic-name={"productCollection"}
                        data-plasmic-override={overrides.productCollection}
                        className={classNames(
                          "__wab_instance",
                          sty.productCollection
                        )}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dJyAc
                                )}
                              >
                                {"No product found!"}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__n5Hqi
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                        noAutoRepeat={true}
                        noLayout={false}
                        search={(() => {
                          try {
                            return $state.textInput.value || $ctx.params.slug;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        sort={"trending-desc"}
                      >
                        <ph.DataCtxReader>
                          {$ctx =>
                            (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.products;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentProduct = __plasmic_item_0;
                              const productIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jy2A1
                                  )}
                                  key={productIndex}
                                >
                                  <ProductBox
                                    className={classNames(
                                      "__wab_instance",
                                      sty.productBox__zJkT
                                    )}
                                    id={(() => {
                                      try {
                                        return currentProduct.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <ph.DataCtxReader>
                                      {$ctx => (
                                        <ProductCardJbs
                                          className={classNames(
                                            "__wab_instance",
                                            sty.productCardJbs__yX45
                                          )}
                                          currentItem={(() => {
                                            try {
                                              return currentProduct;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                        />
                                      )}
                                    </ph.DataCtxReader>
                                  </ProductBox>
                                </div>
                              );
                            })
                          }
                        </ph.DataCtxReader>
                      </ProductCollection>
                      {false ? (
                        <GraphqlFetcher
                          data-plasmic-name={"graphQlFetcher"}
                          data-plasmic-override={overrides.graphQlFetcher}
                          className={classNames(
                            "__wab_instance",
                            sty.graphQlFetcher
                          )}
                          dataName={"fetchedData"}
                          errorDisplay={
                            <ph.DataCtxReader>
                              {$ctx => "Error fetching data"}
                            </ph.DataCtxReader>
                          }
                          headers={{
                            "Content-Type": "application/json",
                            Accept: "application/json",
                            "X-Shopify-Storefront-Access-Token":
                              "0f43cbfd628ae6e4fef6a34969378290"
                          }}
                          loadingDisplay={
                            <ph.DataCtxReader>
                              {$ctx => "Loading..."}
                            </ph.DataCtxReader>
                          }
                          method={"POST"}
                          noLayout={false}
                          previewSpinner={false}
                          query={{
                            query:
                              '{\n  products(first: 10, query: "collection:collars AND (product_type:short * OR title:short * OR tag:short *)") {\n    edges {\n      node {\n        id\n        title\n        priceRange {\n          minVariantPrice {\n            amount\n            currencyCode\n          }\n        }\n        images(first: 1) {\n          edges {\n            node {\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
                            variables: {}
                          }}
                          queryKey={(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          url={
                            "https://juhubeachstudio.myshopify.com/api/2023-07/graphql.json"
                          }
                          varOverrides={(() => {
                            try {
                              return {
                                categoryId: $ctx.currentCategory.id,
                                searchText: $state.textInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {};
                              }
                              throw e;
                            }
                          })()}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9Iimi
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return JSON.parse(
                                        $ctx.fetchedData.data.product.metafield
                                          .value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mN316
                                      )}
                                      key={currentIndex}
                                    >
                                      <ProductBox
                                        className={classNames(
                                          "__wab_instance",
                                          sty.productBox__kYtl
                                        )}
                                        id={(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        <ph.DataCtxReader>
                                          {$ctx => (
                                            <ProductCardJbs
                                              className={classNames(
                                                "__wab_instance",
                                                sty.productCardJbs___2NeUn
                                              )}
                                              currentItem={(() => {
                                                try {
                                                  return $ctx.currentProduct;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          )}
                                        </ph.DataCtxReader>
                                      </ProductBox>
                                    </div>
                                  );
                                })}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rMAqc
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__uE74L
                                    )}
                                    color={"clear"}
                                    endIcon={
                                      <Icon38Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__gg2Hm
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    link={`/category/${"all"}`}
                                    shape={"sharp"}
                                    showEndIcon={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qXuCj
                                      )}
                                    >
                                      {"SEE ALL"}
                                    </div>
                                  </Button>
                                </div>
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </GraphqlFetcher>
                      ) : null}
                    </div>
                  )}
                </ph.DataCtxReader>
              </CategoryCollection>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bS8Cu)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button___2Yksa)}
                  color={"red"}
                  link={`/categories`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kZqk
                    )}
                  >
                    {"SEE ALL CATEGORIES"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__ofyzo)}
                  color={"red"}
                  link={`/category/${"all"}`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yQesa
                    )}
                  >
                    {"SHOP ALL"}
                  </div>
                </Button>
              </p.Stack>
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "section",
    "categoryCollection",
    "categoryField",
    "textInput",
    "productCollection",
    "graphQlFetcher"
  ],
  fullPage: [
    "fullPage",
    "section",
    "categoryCollection",
    "categoryField",
    "textInput",
    "productCollection",
    "graphQlFetcher"
  ],
  section: [
    "section",
    "categoryCollection",
    "categoryField",
    "textInput",
    "productCollection",
    "graphQlFetcher"
  ],
  categoryCollection: [
    "categoryCollection",
    "categoryField",
    "textInput",
    "productCollection",
    "graphQlFetcher"
  ],
  categoryField: ["categoryField"],
  textInput: ["textInput"],
  productCollection: ["productCollection"],
  graphQlFetcher: ["graphQlFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  section: typeof Section;
  categoryCollection: typeof CategoryCollection;
  categoryField: typeof CategoryField;
  textInput: typeof TextInput;
  productCollection: typeof ProductCollection;
  graphQlFetcher: typeof GraphqlFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategory__VariantsArgs;
    args?: PlasmicCategory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategory__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategory__ArgProps,
          internalVariantPropNames: PlasmicCategory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategory";
  } else {
    func.displayName = `PlasmicCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicCategory = Object.assign(
  // Top-level PlasmicCategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    section: makeNodeComponent("section"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    textInput: makeNodeComponent("textInput"),
    productCollection: makeNodeComponent("productCollection"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),

    // Metadata about props expected for PlasmicCategory
    internalVariantProps: PlasmicCategory__VariantProps,
    internalArgProps: PlasmicCategory__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCategory;
/* prettier-ignore-end */
