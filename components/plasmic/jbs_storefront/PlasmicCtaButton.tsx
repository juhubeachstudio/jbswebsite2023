// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: ygJs84GAOvt9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicCtaButton.module.css"; // plasmic-import: ygJs84GAOvt9/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicCtaButton__VariantMembers = {
  hover: "hover";
};
export type PlasmicCtaButton__VariantsArgs = {
  hover?: SingleBooleanChoiceArg<"hover">;
};
type VariantPropType = keyof PlasmicCtaButton__VariantsArgs;
export const PlasmicCtaButton__VariantProps = new Array<VariantPropType>(
  "hover"
);

export type PlasmicCtaButton__ArgsType = {
  content?: string;
  link?: string;
  newTab?: boolean;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicCtaButton__ArgsType;
export const PlasmicCtaButton__ArgProps = new Array<ArgPropType>(
  "content",
  "link",
  "newTab",
  "onClick"
);

export type PlasmicCtaButton__OverridesType = {
  root?: p.Flex<typeof Button>;
};

export interface DefaultCtaButtonProps {
  content?: string;
  link?: string;
  newTab?: boolean;
  onClick?: (event: any) => void;
  hover?: SingleBooleanChoiceArg<"hover">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtaButton__RenderFunc(props: {
  variants: PlasmicCtaButton__VariantsArgs;
  args: PlasmicCtaButton__ArgsType;
  overrides: PlasmicCtaButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          content: "CTA Button",
          newTab: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hover
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.roothover]: hasVariant($state, "hover", "hover")
      })}
      color={hasVariant($state, "hover", "hover") ? "yellow" : "redJbs"}
      onClick={args.onClick}
      onClickCapture={async event => {
        const $steps = {};

        $steps["updateHover"] = event
          ? (() => {
              const actionArgs = { vgroup: "hover", operation: 4 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                p.set($state, vgroup, true);
                return true;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateHover"] != null &&
          typeof $steps["updateHover"] === "object" &&
          typeof $steps["updateHover"].then === "function"
        ) {
          $steps["updateHover"] = await $steps["updateHover"];
        }
      }}
      onMouseOver={async event => {
        const $steps = {};

        $steps["updateHover"] = $state.hover
          ? (() => {
              const actionArgs = { vgroup: "hover", operation: 4 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                p.set($state, vgroup, true);
                return true;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateHover"] != null &&
          typeof $steps["updateHover"] === "object" &&
          typeof $steps["updateHover"].then === "function"
        ) {
          $steps["updateHover"] = await $steps["updateHover"];
        }

        $steps["updateHover2"] =
          $state.hover == false
            ? (() => {
                const actionArgs = {
                  vgroup: "hover",
                  operation: 6,
                  value: "hover"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  p.set($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["updateHover2"] != null &&
          typeof $steps["updateHover2"] === "object" &&
          typeof $steps["updateHover2"].then === "function"
        ) {
          $steps["updateHover2"] = await $steps["updateHover2"];
        }
      }}
      target={args.newTab}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtaButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtaButton__VariantsArgs;
    args?: PlasmicCtaButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtaButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtaButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtaButton__ArgProps,
          internalVariantPropNames: PlasmicCtaButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtaButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCtaButton";
  } else {
    func.displayName = `PlasmicCtaButton.${nodeName}`;
  }
  return func;
}

export const PlasmicCtaButton = Object.assign(
  // Top-level PlasmicCtaButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCtaButton
    internalVariantProps: PlasmicCtaButton__VariantProps,
    internalArgProps: PlasmicCtaButton__ArgProps
  }
);

export default PlasmicCtaButton;
/* prettier-ignore-end */
