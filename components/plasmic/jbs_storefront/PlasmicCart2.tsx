// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: 4iMp3co2mNSz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CartProvider } from "@plasmicpkgs/commerce";
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component
import SpecialInstructionsInput from "../../SpecialInstructionsInput"; // plasmic-import: znFTM0nXx5O6/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicCart2.module.css"; // plasmic-import: 4iMp3co2mNSz/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicCart2__VariantMembers = {};
export type PlasmicCart2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCart2__VariantsArgs;
export const PlasmicCart2__VariantProps = new Array<VariantPropType>();

export type PlasmicCart2__ArgsType = {};
type ArgPropType = keyof PlasmicCart2__ArgsType;
export const PlasmicCart2__ArgProps = new Array<ArgPropType>();

export type PlasmicCart2__OverridesType = {
  root?: p.Flex<"div">;
  cartProvider?: p.Flex<typeof CartProvider>;
  img?: p.Flex<typeof p.PlasmicImg>;
  p?: p.Flex<"p">;
  specialInstructionsInput?: p.Flex<typeof SpecialInstructionsInput>;
};

export interface DefaultCart2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCart2__RenderFunc(props: {
  variants: PlasmicCart2__VariantsArgs;
  args: PlasmicCart2__ArgsType;
  overrides: PlasmicCart2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "specialInstructionsInput.specialInstructions",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <CartProvider
        data-plasmic-name={"cartProvider"}
        data-plasmic-override={overrides.cartProvider}
        className={classNames("__wab_instance", sty.cartProvider)}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.cart.lineItems.length === 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___28Ya1)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dpvDu
                    )}
                  >
                    {"No items have been added to the cart!"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__w6F7L)}
                    color={"red"}
                    link={`/category/${"all"}`}
                    showEndIcon={true}
                  />
                </p.Stack>
              ) : null}
              {(() => {
                try {
                  return $ctx.cart.lineItems.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__bHPnN)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lwKSi)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.cart.lineItems;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__a0H9V
                          )}
                          key={currentIndex}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___09Wjv
                            )}
                            component={Link}
                            href={`/product/${(() => {
                              try {
                                return currentItem.path;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            platform={"nextjs"}
                          >
                            <p.PlasmicImg
                              data-plasmic-name={"img"}
                              data-plasmic-override={overrides.img}
                              alt={(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(sty.img)}
                              displayHeight={"100%"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"160px"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return currentItem.variant.image.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </p.PlasmicLink>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pLc1J
                            )}
                          >
                            <p.Stack
                              as={p.PlasmicLink}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__fWwMv,
                                ``
                              )}
                              component={Link}
                              href={`/product/${(() => {
                                try {
                                  return currentItem.path;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`}
                              platform={"nextjs"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7Kkc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return currentItem.variant.name ===
                                    "Default Title"
                                    ? false
                                    : true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xXv5
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.variant.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                            </p.Stack>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aoOh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dnYb5
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__fcEjs
                                  )}
                                  color={"clear"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateItemInCart"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return currentItem.id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              (() => {
                                                try {
                                                  return (
                                                    currentItem.quantity - 1
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-commerce-shopify-provider.updateItem"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateItemInCart"] != null &&
                                      typeof $steps["updateItemInCart"] ===
                                        "object" &&
                                      typeof $steps["updateItemInCart"].then ===
                                        "function"
                                    ) {
                                      $steps["updateItemInCart"] = await $steps[
                                        "updateItemInCart"
                                      ];
                                    }
                                  }}
                                  shape={"round"}
                                  size={"compact"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0Qkpp
                                    )}
                                  >
                                    {"-"}
                                  </div>
                                </Button>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1FncX
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.quantity;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___4W2A8
                                  )}
                                  color={"clear"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateItemInCart"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return currentItem.id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              (() => {
                                                try {
                                                  return (
                                                    currentItem.quantity + 1
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-commerce-shopify-provider.updateItem"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateItemInCart"] != null &&
                                      typeof $steps["updateItemInCart"] ===
                                        "object" &&
                                      typeof $steps["updateItemInCart"].then ===
                                        "function"
                                    ) {
                                      $steps["updateItemInCart"] = await $steps[
                                        "updateItemInCart"
                                      ];
                                    }
                                  }}
                                  shape={"round"}
                                  size={"compact"}
                                >
                                  {"+"}
                                </Button>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__blfQa
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "₹" +
                                        currentItem.quantity *
                                          currentItem.variant.price
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e8QlL)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pBdsZ
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "₹" + $ctx.cart.totalPrice;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g3ALw)}
                  >
                    <p
                      data-plasmic-name={"p"}
                      data-plasmic-override={overrides.p}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p
                      )}
                    >
                      {"Special Instructions"}
                    </p>
                    <SpecialInstructionsInput
                      data-plasmic-name={"specialInstructionsInput"}
                      data-plasmic-override={overrides.specialInstructionsInput}
                      className={classNames(
                        "__wab_instance",
                        sty.specialInstructionsInput
                      )}
                      onSpecialInstructionsChange={async (
                        ...eventArgs: any
                      ) => {
                        p.generateStateOnChangeProp($state, [
                          "specialInstructionsInput",
                          "specialInstructions"
                        ]).apply(null, eventArgs);
                        (async val => {
                          const $steps = {};

                          $steps["runCode"] = false
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return ($ctx.cart.note =
                                        $state.specialInstructionsInput
                                          ?.specialInstructions || "");
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dON3)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ywrkm
                      )}
                      color={"red"}
                      link={(() => {
                        try {
                          return $ctx.cart.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b8Xci
                        )}
                      >
                        {"PROCEED TO CHECKOUT"}
                      </div>
                    </Button>
                  </div>
                </div>
              ) : null}
            </React.Fragment>
          )}
        </ph.DataCtxReader>
      </CartProvider>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cartProvider", "img", "p", "specialInstructionsInput"],
  cartProvider: ["cartProvider", "img", "p", "specialInstructionsInput"],
  img: ["img"],
  p: ["p"],
  specialInstructionsInput: ["specialInstructionsInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cartProvider: typeof CartProvider;
  img: typeof p.PlasmicImg;
  p: "p";
  specialInstructionsInput: typeof SpecialInstructionsInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCart2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCart2__VariantsArgs;
    args?: PlasmicCart2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCart2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCart2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCart2__ArgProps,
          internalVariantPropNames: PlasmicCart2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCart2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCart2";
  } else {
    func.displayName = `PlasmicCart2.${nodeName}`;
  }
  return func;
}

export const PlasmicCart2 = Object.assign(
  // Top-level PlasmicCart2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cartProvider: makeNodeComponent("cartProvider"),
    img: makeNodeComponent("img"),
    p: makeNodeComponent("p"),
    specialInstructionsInput: makeNodeComponent("specialInstructionsInput"),

    // Metadata about props expected for PlasmicCart2
    internalVariantProps: PlasmicCart2__VariantProps,
    internalArgProps: PlasmicCart2__ArgProps
  }
);

export default PlasmicCart2;
/* prettier-ignore-end */
