// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: iURTST31N2A8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FullPage from "../../FullPage"; // plasmic-import: VpRM2nIn0R/component
import Section from "../../Section"; // plasmic-import: GMAR4VOl00/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import CategoryCard from "../../CategoryCard"; // plasmic-import: VOdWaLC8FIM5/component
import Button2 from "../../Button2"; // plasmic-import: yEsI5slGwPm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicCategories.module.css"; // plasmic-import: iURTST31N2A8/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon

createPlasmicElementProxy;

export type PlasmicCategories__VariantMembers = {};
export type PlasmicCategories__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategories__VariantsArgs;
export const PlasmicCategories__VariantProps = new Array<VariantPropType>();

export type PlasmicCategories__ArgsType = {};
type ArgPropType = keyof PlasmicCategories__ArgsType;
export const PlasmicCategories__ArgProps = new Array<ArgPropType>();

export type PlasmicCategories__OverridesType = {
  root?: p.Flex<"div">;
  fullPage?: p.Flex<typeof FullPage>;
  section?: p.Flex<typeof Section>;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  categoryCard?: p.Flex<typeof CategoryCard>;
  button2?: p.Flex<typeof Button2>;
};

export interface DefaultCategoriesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategories__RenderFunc(props: {
  variants: PlasmicCategories__VariantsArgs;
  args: PlasmicCategories__ArgsType;
  overrides: PlasmicCategories__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <FullPage
            data-plasmic-name={"fullPage"}
            data-plasmic-override={overrides.fullPage}
            className={classNames("__wab_instance", sty.fullPage)}
          >
            <Section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames("__wab_instance", sty.section)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x9ZVf
                )}
              >
                {"Categories"}
              </div>
              <CategoryCollection
                data-plasmic-name={"categoryCollection"}
                data-plasmic-override={overrides.categoryCollection}
                className={classNames("__wab_instance", sty.categoryCollection)}
                emptyMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eBfV
                        )}
                      >
                        {"No collection found!"}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                loadingMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aiLoK
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                noAutoRepeat={true}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cqIcg)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.categories;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <CategoryCard
                            data-plasmic-name={"categoryCard"}
                            data-plasmic-override={overrides.categoryCard}
                            className={classNames(
                              "__wab_instance",
                              sty.categoryCard
                            )}
                            currentItem={currentItem}
                            key={currentIndex}
                          />
                        );
                      })}
                    </div>
                  )}
                </ph.DataCtxReader>
              </CategoryCollection>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__onkfy)}
              >
                <Button2
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={"red"}
                  link={`/category/${"all"}`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nghJx
                    )}
                  >
                    {"Shop all"}
                  </div>
                </Button2>
              </p.Stack>
            </Section>
          </FullPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullPage",
    "section",
    "categoryCollection",
    "categoryCard",
    "button2"
  ],

  fullPage: [
    "fullPage",
    "section",
    "categoryCollection",
    "categoryCard",
    "button2"
  ],

  section: ["section", "categoryCollection", "categoryCard", "button2"],
  categoryCollection: ["categoryCollection", "categoryCard"],
  categoryCard: ["categoryCard"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fullPage: typeof FullPage;
  section: typeof Section;
  categoryCollection: typeof CategoryCollection;
  categoryCard: typeof CategoryCard;
  button2: typeof Button2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategories__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategories__VariantsArgs;
    args?: PlasmicCategories__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategories__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategories__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategories__ArgProps,
          internalVariantPropNames: PlasmicCategories__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategories__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategories";
  } else {
    func.displayName = `PlasmicCategories.${nodeName}`;
  }
  return func;
}

export const PlasmicCategories = Object.assign(
  // Top-level PlasmicCategories renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullPage: makeNodeComponent("fullPage"),
    section: makeNodeComponent("section"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryCard: makeNodeComponent("categoryCard"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicCategories
    internalVariantProps: PlasmicCategories__VariantProps,
    internalArgProps: PlasmicCategories__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCategories;
/* prettier-ignore-end */
