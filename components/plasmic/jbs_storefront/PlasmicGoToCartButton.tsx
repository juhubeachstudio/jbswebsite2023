// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: iT6In2ggLenM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component
import { CartProvider } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicGoToCartButton.module.css"; // plasmic-import: iT6In2ggLenM/css

import Cart1SvgIcon from "./icons/PlasmicIcon__Cart1Svg"; // plasmic-import: RqINMsIJ-W/icon

createPlasmicElementProxy;

export type PlasmicGoToCartButton__VariantMembers = {};
export type PlasmicGoToCartButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicGoToCartButton__VariantsArgs;
export const PlasmicGoToCartButton__VariantProps = new Array<VariantPropType>();

export type PlasmicGoToCartButton__ArgsType = {};
type ArgPropType = keyof PlasmicGoToCartButton__ArgsType;
export const PlasmicGoToCartButton__ArgProps = new Array<ArgPropType>();

export type PlasmicGoToCartButton__OverridesType = {
  root?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  cartProvider?: p.Flex<typeof CartProvider>;
  p?: p.Flex<"p">;
};

export interface DefaultGoToCartButtonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGoToCartButton__RenderFunc(props: {
  variants: PlasmicGoToCartButton__VariantsArgs;
  args: PlasmicGoToCartButton__ArgsType;
  overrides: PlasmicGoToCartButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      color={"clear"}
      endIcon={null}
      link={`/cart`}
      size={"minimal"}
      startIcon={null}
    >
      <Cart1SvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__x6XnG)}>
        <CartProvider
          data-plasmic-name={"cartProvider"}
          data-plasmic-override={overrides.cartProvider}
          className={classNames("__wab_instance", sty.cartProvider)}
        >
          <ph.DataCtxReader>
            {$ctx =>
              (() => {
                try {
                  return $ctx.cart.lineItems.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__nj3Ba)}>
                  <p
                    data-plasmic-name={"p"}
                    data-plasmic-override={overrides.p}
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.cart.lineItems.reduce(
                            (total, item) => total + item.quantity,
                            0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </p>
                </div>
              ) : null
            }
          </ph.DataCtxReader>
        </CartProvider>
      </div>
    </Button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "cartProvider", "p"],
  svg: ["svg"],
  cartProvider: ["cartProvider", "p"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Button;
  svg: "svg";
  cartProvider: typeof CartProvider;
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGoToCartButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGoToCartButton__VariantsArgs;
    args?: PlasmicGoToCartButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGoToCartButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGoToCartButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGoToCartButton__ArgProps,
          internalVariantPropNames: PlasmicGoToCartButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGoToCartButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGoToCartButton";
  } else {
    func.displayName = `PlasmicGoToCartButton.${nodeName}`;
  }
  return func;
}

export const PlasmicGoToCartButton = Object.assign(
  // Top-level PlasmicGoToCartButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    cartProvider: makeNodeComponent("cartProvider"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicGoToCartButton
    internalVariantProps: PlasmicGoToCartButton__VariantProps,
    internalArgProps: PlasmicGoToCartButton__ArgProps
  }
);

export default PlasmicGoToCartButton;
/* prettier-ignore-end */
