// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: bpUxZE49TfJM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SliderWrapper } from "@plasmicpkgs/react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick"; // plasmic-import: HOQUyOpClJ/codeComponentHelper
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicSomethingNewSlider2.module.css"; // plasmic-import: bpUxZE49TfJM/css

createPlasmicElementProxy;

export type PlasmicSomethingNewSlider2__VariantMembers = {};
export type PlasmicSomethingNewSlider2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSomethingNewSlider2__VariantsArgs;
export const PlasmicSomethingNewSlider2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSomethingNewSlider2__ArgsType = {};
type ArgPropType = keyof PlasmicSomethingNewSlider2__ArgsType;
export const PlasmicSomethingNewSlider2__ArgProps = new Array<ArgPropType>();

export type PlasmicSomethingNewSlider2__OverridesType = {
  sliderCarousel11?: p.Flex<typeof SliderWrapper>;
};

export interface DefaultSomethingNewSlider2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSomethingNewSlider2__RenderFunc(props: {
  variants: PlasmicSomethingNewSlider2__VariantsArgs;
  args: PlasmicSomethingNewSlider2__ArgsType;
  overrides: PlasmicSomethingNewSlider2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel11.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel11",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (() => {
    const child$Props = {
      arrows: false,
      autoplay: true,
      autoplaySpeed: 1500,
      beforeChange: p.generateStateOnChangePropForCodeComponents(
        $state,
        "currentSlide",
        ["sliderCarousel11", "currentSlide"],
        SliderWrapper_Helpers
      ),
      centerMode: true,
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.sliderCarousel11
      ),
      dots: true,
      editingSlide: p.generateStateValueProp($state, [
        "sliderCarousel11",
        "currentSlide"
      ]),
      initialSlide: 0,
      ref: ref => {
        $refs["sliderCarousel11"] = ref;
      },
      sliderScopeClassName: sty["sliderCarousel11__slider"],
      slidesToShow: 3
    };
    p.initializeCodeComponentStates(
      $state,
      [
        {
          name: "currentSlide",
          plasmicStateName: "sliderCarousel11.currentSlide"
        }
      ],

      [],
      SliderWrapper_Helpers ?? {},
      child$Props
    );

    return (
      <SliderWrapper
        data-plasmic-name={"sliderCarousel11"}
        data-plasmic-override={overrides.sliderCarousel11}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      >
        <div className={classNames(projectcss.all, sty.freeBox___3CT4A)}>
          <ProductCollection
            category={"gid://shopify/Collection/455454589224"}
            className={classNames(
              "__wab_instance",
              sty.productCollection__v7Vm
            )}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cNbS
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q7Gup
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            noAutoRepeat={true}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__zbN4Z
                  )}
                  id={(() => {
                    try {
                      return $ctx.products[0].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iaNZ
                        )}
                      >
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__dyCKv
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rt1RW
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__tra2K
                            )}
                            field={"name"}
                          />
                        </div>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              )}
            </ph.DataCtxReader>
          </ProductCollection>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___13X83)}>
          <ProductCollection
            category={"gid://shopify/Collection/455454490920"}
            className={classNames(
              "__wab_instance",
              sty.productCollection__id1Jp
            )}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bX2Sx
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vYT
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            noAutoRepeat={true}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <ProductBox
                  className={classNames(
                    "__wab_instance",
                    sty.productBox__zLtAq
                  )}
                  id={(() => {
                    try {
                      return $ctx.products[0].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__t8NO
                        )}
                      >
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__pHGeK
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zkOq4
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__rmDoo
                            )}
                            field={"name"}
                          />
                        </div>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              )}
            </ph.DataCtxReader>
          </ProductCollection>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__jFvKg)}>
          <ProductCollection
            category={"gid://shopify/Collection/455454785832"}
            className={classNames(
              "__wab_instance",
              sty.productCollection__n8Ave
            )}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___44ZrW
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tyge1
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            noAutoRepeat={true}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <ProductBox
                  className={classNames("__wab_instance", sty.productBox__gDCz)}
                  id={(() => {
                    try {
                      return $ctx.products[0].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nWnQ
                        )}
                      >
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__fDdqL
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kp2C0
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField__tpKsW
                            )}
                            field={"name"}
                          />
                        </div>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </ProductBox>
              )}
            </ph.DataCtxReader>
          </ProductCollection>
        </div>
      </SliderWrapper>
    );
  })() as React.ReactElement | null;
}

const PlasmicDescendants = {
  sliderCarousel11: ["sliderCarousel11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sliderCarousel11: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSomethingNewSlider2__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSomethingNewSlider2__VariantsArgs;
    args?: PlasmicSomethingNewSlider2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSomethingNewSlider2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSomethingNewSlider2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSomethingNewSlider2__ArgProps,
          internalVariantPropNames: PlasmicSomethingNewSlider2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSomethingNewSlider2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sliderCarousel11") {
    func.displayName = "PlasmicSomethingNewSlider2";
  } else {
    func.displayName = `PlasmicSomethingNewSlider2.${nodeName}`;
  }
  return func;
}

export const PlasmicSomethingNewSlider2 = Object.assign(
  // Top-level PlasmicSomethingNewSlider2 renders the root element
  makeNodeComponent("sliderCarousel11"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSomethingNewSlider2
    internalVariantProps: PlasmicSomethingNewSlider2__VariantProps,
    internalArgProps: PlasmicSomethingNewSlider2__ArgProps
  }
);

export default PlasmicSomethingNewSlider2;
/* prettier-ignore-end */
