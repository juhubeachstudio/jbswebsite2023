// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: SFhtR_YchzSd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CategoryCollection } from "@plasmicpkgs/commerce";
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdSubMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicJbsMenu2.module.css"; // plasmic-import: SFhtR_YchzSd/css

createPlasmicElementProxy;

export type PlasmicJbsMenu2__VariantMembers = {};
export type PlasmicJbsMenu2__VariantsArgs = {};
type VariantPropType = keyof PlasmicJbsMenu2__VariantsArgs;
export const PlasmicJbsMenu2__VariantProps = new Array<VariantPropType>();

export type PlasmicJbsMenu2__ArgsType = {};
type ArgPropType = keyof PlasmicJbsMenu2__ArgsType;
export const PlasmicJbsMenu2__ArgProps = new Array<ArgPropType>();

export type PlasmicJbsMenu2__OverridesType = {
  root?: p.Flex<"div">;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  menu?: p.Flex<typeof AntdMenu>;
  shop?: p.Flex<typeof AntdSubMenu>;
  svg?: p.Flex<"svg">;
};

export interface DefaultJbsMenu2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicJbsMenu2__RenderFunc(props: {
  variants: PlasmicJbsMenu2__VariantsArgs;
  args: PlasmicJbsMenu2__ArgsType;
  overrides: PlasmicJbsMenu2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <CategoryCollection
        data-plasmic-name={"categoryCollection"}
        data-plasmic-override={overrides.categoryCollection}
        className={classNames("__wab_instance", sty.categoryCollection)}
        emptyMessage={null}
        loadingMessage={null}
        noAutoRepeat={true}
        noLayout={true}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <AntdMenu
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              className={classNames("__wab_instance", sty.menu)}
              expandIcon={
                <svg
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              mode={"horizontal"}
              multiple={false}
              onSelect={async key => {
                const $steps = {};
              }}
              triggerSubMenuAction={"hover"}
            >
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__go0Ju)}
                key={"Home"}
                title={"Home"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dPjIl
                  )}
                >
                  {"Home"}
                </div>
              </AntdMenuItem>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__kPf1)}
                danger={false}
                key={"About"}
                onClick={async () => {
                  const $steps = {};

                  $steps["goToAbout"] = true
                    ? (() => {
                        const actionArgs = { destination: `/about` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAbout"] != null &&
                    typeof $steps["goToAbout"] === "object" &&
                    typeof $steps["goToAbout"].then === "function"
                  ) {
                    $steps["goToAbout"] = await $steps["goToAbout"];
                  }
                }}
                title={"About"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uG7Ce
                  )}
                >
                  {"About"}
                </div>
              </AntdMenuItem>
              <AntdSubMenu
                data-plasmic-name={"shop"}
                data-plasmic-override={overrides.shop}
                className={classNames("__wab_instance", sty.shop)}
                disabled={false}
                key={"Shop"}
                popupClassName={classNames({
                  [sty["pcls_1DPoQaEJ2sCf"]]: true
                })}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__smD5T
                    )}
                  >
                    {"Shop"}
                  </div>
                }
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.categories;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const collection = __plasmic_item_0;
                  const collectionIndex = __plasmic_idx_0;
                  return (
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__aviKu
                      )}
                      key={(() => {
                        try {
                          return $ctx.categories[0].slug;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "all";
                          }
                          throw e;
                        }
                      })()}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToCategory"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/category/${(() => {
                                  try {
                                    return collection.slug;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "all";
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToCategory"] != null &&
                          typeof $steps["goToCategory"] === "object" &&
                          typeof $steps["goToCategory"].then === "function"
                        ) {
                          $steps["goToCategory"] = await $steps["goToCategory"];
                        }
                      }}
                      title={(() => {
                        try {
                          return collection.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pvlDq
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return collection.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "All";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdMenuItem>
                  );
                })}
              </AntdSubMenu>
            </AntdMenu>
          )}
        </ph.DataCtxReader>
      </CategoryCollection>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "categoryCollection", "menu", "shop", "svg"],
  categoryCollection: ["categoryCollection", "menu", "shop", "svg"],
  menu: ["menu", "shop", "svg"],
  shop: ["shop"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  categoryCollection: typeof CategoryCollection;
  menu: typeof AntdMenu;
  shop: typeof AntdSubMenu;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJbsMenu2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJbsMenu2__VariantsArgs;
    args?: PlasmicJbsMenu2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJbsMenu2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicJbsMenu2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJbsMenu2__ArgProps,
          internalVariantPropNames: PlasmicJbsMenu2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJbsMenu2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJbsMenu2";
  } else {
    func.displayName = `PlasmicJbsMenu2.${nodeName}`;
  }
  return func;
}

export const PlasmicJbsMenu2 = Object.assign(
  // Top-level PlasmicJbsMenu2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    categoryCollection: makeNodeComponent("categoryCollection"),
    menu: makeNodeComponent("menu"),
    shop: makeNodeComponent("shop"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicJbsMenu2
    internalVariantProps: PlasmicJbsMenu2__VariantProps,
    internalArgProps: PlasmicJbsMenu2__ArgProps
  }
);

export default PlasmicJbsMenu2;
/* prettier-ignore-end */
