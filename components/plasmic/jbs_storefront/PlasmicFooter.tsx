// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: mZogRkwS1rd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Blackyellowborder from "../../Blackyellowborder"; // plasmic-import: qeyEUvMFwY/component
import Button2 from "../../Button2"; // plasmic-import: yEsI5slGwPm/component

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: mZogRkwS1rd/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: E3DB21mRkOyk/icon
import Facebook176SvgrepoComsvgIcon from "./icons/PlasmicIcon__Facebook176SvgrepoComsvg"; // plasmic-import: AltOIFs52szI/icon
import InstagramSvgrepoComsvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComsvg"; // plasmic-import: oo9zvXXIVhzp/icon
import WhatsappSvgrepoComsvgIcon from "./icons/PlasmicIcon__WhatsappSvgrepoComsvg"; // plasmic-import: MwIlfRiCxnsi/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  blackyellowborder?: p.Flex<typeof Blackyellowborder>;
  columns?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Blackyellowborder
        data-plasmic-name={"blackyellowborder"}
        data-plasmic-override={overrides.blackyellowborder}
        className={classNames("__wab_instance", sty.blackyellowborder)}
      />

      <div className={classNames(projectcss.all, sty.freeBox__anaXj)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__l4HnA)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tmrfe
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5
                    )}
                  >
                    {"Get monthly updates on drops, restocks and events "}
                  </h5>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <Button2
              className={classNames("__wab_instance", sty.button2__p6Lu)}
              color={"pink"}
              shape={"rounded"}
              showEndIcon={true}
            >
              {"emailidhardedo@gmail.com"}
            </Button2>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.column__vJVg2)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3Bhqm)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ovOtb)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cOKrA
                  )}
                >
                  {"Find us"}
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___394L7)}
                >
                  <Button2
                    className={classNames("__wab_instance", sty.button2__gjXcG)}
                    color={"white"}
                    shape={"round"}
                    size={"compact"}
                  >
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__fEOw)}
                      role={"img"}
                    />
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__uU4)}
                    color={"white"}
                    shape={"round"}
                    size={"compact"}
                  >
                    <Facebook176SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__kDpUm)}
                      role={"img"}
                    />
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__nMadE)}
                    color={"white"}
                    shape={"round"}
                    size={"compact"}
                  >
                    <InstagramSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__vu2Zs)}
                      role={"img"}
                    />
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__uDJjx)}
                    color={"white"}
                    shape={"round"}
                    size={"compact"}
                  >
                    <WhatsappSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__fStXc)}
                      role={"img"}
                    />
                  </Button2>
                </p.Stack>
              </p.Stack>
              <Button2
                className={classNames("__wab_instance", sty.button2__eOh2R)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__eD0U1)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg___7Cjna)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__el2Z4
                  )}
                >
                  {"About"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__d687N)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___3NWcC)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__rlwnp)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oGsVc
                  )}
                >
                  {"Contact us"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__kVkyq)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__vvUwx)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__h2MMg)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i2MJ
                  )}
                >
                  {"Shipping policy"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__q9Zwf)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__rTRx)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__bw6Nu)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tkJrT
                  )}
                >
                  {"Returns and exchange policy"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__lzpR0)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__bqFw)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__qdoWv)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zyeqo
                  )}
                >
                  {"Privacy policy"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__zXssn)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__gkIli)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__jRsVm)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bJvl9
                  )}
                >
                  {"Terms of Use"}
                </div>
              </Button2>
              <Button2
                className={classNames("__wab_instance", sty.button2__px0Gd)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___09EPo)}
                    role={"img"}
                  />
                }
                size={"minimal"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__udWgF)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gqzU
                  )}
                >
                  {"FAQ"}
                </div>
              </Button2>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "blackyellowborder", "columns", "h5"],
  blackyellowborder: ["blackyellowborder"],
  columns: ["columns", "h5"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  blackyellowborder: typeof Blackyellowborder;
  columns: "div";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    blackyellowborder: makeNodeComponent("blackyellowborder"),
    columns: makeNodeComponent("columns"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
