/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: heL2P6rJiLNgtnBJPb6i1m
// Component: mZogRkwS1rd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Blackyellowborder from "../../Blackyellowborder"; // plasmic-import: qeyEUvMFwY/component
import Button from "../../Button"; // plasmic-import: yEsI5slGwPm/component

import { useScreenVariants as useScreenVariants_6Hzia3M7Np4Ulu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6hzia3m7Np4ulu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jbs_storefront.module.css"; // plasmic-import: heL2P6rJiLNgtnBJPb6i1m/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: mZogRkwS1rd/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ew07hyuAC0c/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3r4KXWygi9v/icon
import FacebookSvgrepoComSvgIcon from "./icons/PlasmicIcon__FacebookSvgrepoComSvg"; // plasmic-import: ZrO-7nzknCPT/icon
import InstagramSvgrepoComSvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComSvg"; // plasmic-import: oo9zvXXIVhzp/icon
import WhatsappSvgrepoComSvgIcon from "./icons/PlasmicIcon__WhatsappSvgrepoComSvg"; // plasmic-import: MwIlfRiCxnsi/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: UJbuthH60ZPo/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  blackyellowborder?: Flex__<typeof Blackyellowborder>;
  h5?: Flex__<"h5">;
  emailButton?: Flex__<typeof Button>;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    hoverActive_root: isRootHover && isRootActive
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Hzia3M7Np4Ulu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[
        triggerRootHoverProps,
        triggerRootActiveProps
      ]}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        src={{
          src: "/plasmic/jbs_storefront/images/footerResized.jpg",
          fullWidth: 1600,
          fullHeight: 648,
          aspectRatio: undefined
        }}
      />

      <Blackyellowborder
        data-plasmic-name={"blackyellowborder"}
        data-plasmic-override={overrides.blackyellowborder}
        className={classNames("__wab_instance", sty.blackyellowborder)}
        play={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox__anaXj)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__iqeF4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tmrfe
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  {"Get monthly updates on drops, restocks and events "}
                </h5>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Button
            data-plasmic-name={"emailButton"}
            data-plasmic-override={overrides.emailButton}
            alignment={"leftAligned"}
            className={classNames("__wab_instance", sty.emailButton)}
            color={
              triggers.hoverActive_root
                ? "darkRedJbs"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "redJbs"
                : "red"
            }
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__dGkJ)}
                role={"img"}
              />
            }
            link={"mailto:juhubeachstudio@gmail.com"}
            showEndIcon={true}
            size={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "compact"
                : undefined
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__js8Qw
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Email Us"
                : "juhubeachstudio@gmail.com"}
            </div>
          </Button>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ovOtb)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cOKrA
              )}
            >
              {"Find us"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___394L7)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__uU4)}
                color={"white"}
                link={"https://www.facebook.com/profile.php?id=100067678451857"}
                shape={"round"}
                size={"compact"}
                target={true}
              >
                <FacebookSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__adS8R)}
                  role={"img"}
                />
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__nMadE)}
                color={"white"}
                link={"https://www.instagram.com/juhubeachstudio/"}
                shape={"round"}
                size={"compact"}
                target={true}
              >
                <InstagramSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__pccuH)}
                  role={"img"}
                />
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__uDJjx)}
                color={"white"}
                link={"https://wa.me/919594594424"}
                shape={"round"}
                size={"compact"}
                target={true}
              >
                <WhatsappSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___8Oc15)}
                  role={"img"}
                />
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__ty55X)}
                color={"white"}
                link={"tel:9594594424"}
                shape={"round"}
                size={"compact"}
                target={true}
              >
                <PhoneSvgIcon
                  className={classNames(projectcss.all, sty.svg__iqJo)}
                  role={"img"}
                />
              </Button>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3Bhqm)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__eOh2R)}
              color={"clear"}
              link={`/about`}
              size={"minimal"}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___22Uf2
                )}
              >
                {"About"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__kVkyq)}
              color={"clear"}
              link={`/shipping-policy`}
              size={"minimal"}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p9Hxx
                )}
              >
                {"Shipping policy"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__q9Zwf)}
              color={"clear"}
              link={`/cancellation-and-refund-policy`}
              size={"minimal"}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hse
                )}
              >
                {"Returns and exchange policy"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__lzpR0)}
              color={"clear"}
              link={`/privacy-policy`}
              size={"minimal"}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oWkYa
                )}
              >
                {"Privacy policy"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__zXssn)}
              color={"clear"}
              link={`/terms-and-conditions`}
              size={"minimal"}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2R5R8
                )}
              >
                {"Terms of use"}
              </div>
            </Button>
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "blackyellowborder", "h5", "emailButton"],
  img: ["img"],
  blackyellowborder: ["blackyellowborder"],
  h5: ["h5"],
  emailButton: ["emailButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  blackyellowborder: typeof Blackyellowborder;
  h5: "h5";
  emailButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    blackyellowborder: makeNodeComponent("blackyellowborder"),
    h5: makeNodeComponent("h5"),
    emailButton: makeNodeComponent("emailButton"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
